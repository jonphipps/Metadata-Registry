DbFinder Admin Generator
========================

The DbFinder plugin comes with a new generator class and theme. Equivalent in feature to the Propel and Doctrine Admin generators, the *DbFinder Admin Generator* relies entirely on `DbFinder` methods at runtime. This means that modules created with this generator are ORM agnostic - they work with Propel as well as with Doctrine.

`generator.yml` parameters
--------------------------

In order to transform a Propel or Doctrine module generated by way of the admin generator task, edit the `generator.yml` file of a module generated by way of the `init-admin` task, and change the `class` parameter to `DbFinderAdminGenerator`:

    generator:
      class:              DbFinderAdminGenerator
      param:
        model_class:      Article
        theme:            default

That's all. The generated module now uses DbFinder calls instead of ORM calls. The usual `generator.yml` syntax apply to this theme exactly the same as with the `sfPropelAdminGenerator`, so any existing generated module should work seamlessly with DbFinder.

As a bonus, the `DbFinderAdminGenerator` offers a few additional features to facilitate your administration generation.

Inter-module links
------------------

In the list view, the `display` parameter already allows to set some column as links to the edit view by using an equal sign (`=`):

    list:
      display: [=title, category]

This will generate, in the `Title` column, the following code:

    <?php echo link_to($article->getTitle(), 'article/edit?id='.$article->getId()) ?>

DbFinderAdminGenerator goes a little further and allows to link to the edit view of *another* module. This is especially useful for foreign key columns:

    list:
      display: [=title, =category]
      fields:
        category: { link_module: categoryAdmin }

Now the `Category` column will also bear a hyperlink to the related Category object:

    <?php echo link_to($article->getCategory(), 'categoryAdmin/edit?id='.$article->getCategory()->getPrimaryKey()) ?>

This was easily achieved with the regular admin generators by using partial columns, but now a simple equal sign does the job.

`with` and `finder_methods`
---------------------------

Being ORM agnostic, the `DbFinderAdminGenerator` does not accept the `peer_method` parameter. Instead, it supports a `with` parameter, where you can stipulate the classes of all the related objects you want to hydrate to save queries:

    list:
      display: [=title, category]
      with:    [Category]

Of course, as the `with()` method accepts several classes, you can hydrate more than one class:

    list:
      display: [=title, category, author]
      with:    [i18n, Category, Author]

*Note*: The resulting query contains a left join, while `sfPropelAdminGenerator` issues queries with a simple `where` condition. That means that even if you choose to hydrate related `Category` objects, the list view will still display `Article` objects with no `Category`. That's a huge difference with the usual generator based on Propel 1.2, which hides records as soon as you declare a `peer_method`.

The list view uses a finder to retrieve the list of records. By adding method names to the `finder_methods` parameter, you 'filter' the view by these filters. This allows you to changes the display order, restrict results or hydrate supplementary columns to save on queries.

    list:
      display: [=title, category, author]
      finder_methods: [withNbComments]

Of course, this implies that you have written an `ArticleFinder` class with a `withNbComments()` method returning the current finder object, as follows:

    [php]
    // in lib/model/ArticleFinder.php
    class ArticleFinder extends DbFinder
    {
      protected $class = 'Article';
      
      public function withNbComments()
      {
        return $this->
          leftJoin('Comment')->
          withColumn('COUNT(Comment.Id)', 'NbComments')->
          groupBy('Article.Id');
      }
    }

Both the 'with' and the 'finder_methods' parameters are also supported in the 'edit' view.

`sort_method`
-------------

In the usual symfony generator, foreign key fields, partial fields and component fields are not sortable. That means that the column name on top of the list view is not clickable for these fields, because symfony has no way to determine how to sort the list for a custom column.

In the DbFinder generator, you can tell symfony which finder method to use in order to sort a custom column. For instance, if your `Article` administration displays a `user` column (with a 1-n relationship between User and Article), then you can add a `sort_method` to the `user` column definition in `fields`:

   list:
     display: [=title, category, user]
     fields:
       user: { sort_method: sortByUser }

You just need to create a corresponding method in your custom finder object:

    [php]
    // in lib/model/ArticleFinder.php
    public function sortByUser($order = 'asc')
    {
      return $this->
        leftJoin('User')->
        orderBy('User.Lastname', $order);
    }

Now the 'User' column is sortable is the list view, and you can order your list by the last name of the Article author.

Note that you can use any of the custom columns defined by way of `withColumn()` inside an `orderBy()` call:

    [php]
    // in lib/model/ArticleFinder.php
    public function sortByNbComments($order = 'asc')
    {
      return $this->orderBy('NbComments', $order);
    }

`batch_actions`
---------------

Like symfony 1.1, the DbFinder admin generator supports the `batch_actions` setting in the `list` view. This setting allows an action to be performed on a list of records. When enabled, this option displays a list of checkboxes in the first column of the list grid, and a dropdown list at the end of the table to choose the batch action to perform. The generator comes with a bundled batch action called `deleteSelected`.

    list:
      batch_actions:
        _deleteSelected:
        myAction: { name: My Action, action: foo }
        
TODO
----

* Pake task to generate a DbFinder Admin Module
* Migrate many-to-many code to DbFinder