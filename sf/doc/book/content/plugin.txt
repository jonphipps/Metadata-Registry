How to use plug-ins
===================

Overview
--------

If you want to extend symfony, the plug-in system ensures you a great flexibility for distribution, upgrade and clean separation with the rest of the framework. Based on the PEAR extension, the symfony plug-in system allows to distribute custom libraries or modules.

What is a plug-in?
------------------

A plug-in is a PEAR package. This has several benefits:

- Install, upgrades and uninstall are built-in features
- Dependencies are also managed by PEAR
- It natively supports various ways to broadcast a plug-in (from a local archive, from a URL, or from a PEAR channel)
- The discovery of new plug-ins is automatic

You will find more about the PEAR distribution system in the [PEAR website][1].

The symfony plug-in system takes advantage of all the features of PEAR, and adds on top of that a custom set of roles, or locations, which allow a plug-in to be installed globally (it will then be available for all your PHP scripts) or locally (it is then copied in a specific project tree structure, and is only available there).

Installing a plug-in
--------------------

The symfony command line makes it easy to install a plug-in. For instance, to install the `sfShoppingCart` plug-in of the `symfony` channel for the current project, type:

    $ symfony plugin-install local symfony/sfShoppingCart
    
This will install the shopping cart classes in the project `lib/` directory, and they will be available to the whole project without the need to require them manually (classes located in the the `lib/` directory are [autoloaded](configuration_practice.html#autoload).

>**Note**: As the symfony plug-in system relies on PEAR, the `plugin-install` will only work if you have PEAR 1.4.0 or higher installed.

If you know that you will need the plug-in for various projects, it is better to install it globally:

    $ symfony plugin-install global symfony/sfShoppingCart

In this case, the library will be installed in the `PEAR_LIB` directory. The command is equivalent to:

    $ pear install symfony/sfShoppingCart
    
>**Note**: The `global` installation of a plug-in can only work if you installed symfony itself via PEAR (not if you installed symfony from a SVN export or a downloaded archive). This is because the plug-ins specify a minimum version for the symfony framework, and this version is given by PEAR.

The plug-in location is not limited to a PEAR channel. You can also use a local .tgz archive or point directly to a web URL:

    $ symfony plugin-install global /home/production/downloads/sfShoppingCart.tgz
    $ symfony plugin-install global http://pear.symfony-project.com/get/sfShoppingCart-1.0.0.tgz
    
The symfony command line also provides other commands:

  Command name          | Effect
  ----------------------|----------------------
  `plugin-uninstall`    | uninstall a plug-in
  `plugin-upgrade`      | upgrade a plug-in
  `plugin-upgrade-all`  | upgrade all plug-ins

Some plug-ins contain a whole module. Once again, a module plug-in can be installed either locally or globally. The only difference between module plug-ins and classic modules is that module plug-ins don't appear in the `myproject/apps/myapp/modules/` directory (to keep them easily upgradeable) and need to be activated in the `settings.yml` file:

    all:
      .settings:
        activated_modules:  [default, sfMyPluginModule]

This is to avoid that a plug-in module becomes available by mistake for a project that doesn't require it, which could open a security breach in symfony applications.

Anatomy of a plug-in
--------------------

A plug-in comes under the shape of a .tgz package, containing at least a `package.xml` file and a folder with the files of the plug-in.

For instance, let's have a look at the `sfShoppingCart` plug-in. You can download the archive at:

    http://pear.symfony-project.com/get/sfShoppingCart-1.0.0.tgz

The `package.xml` follows the PEAR syntax:

    [xml]
    <?xml version="1.0" encoding="UTF-8"?>
    <package packagerversion="1.4.6" version="2.0" xmlns="http://pear.php.net/dtd/package-2.0" xmlns:tasks="http://pear.php.net/dtd/tasks-1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pear.php.net/dtd/tasks-1.0 http://pear.php.net/dtd/tasks-1.0.xsd http://pear.php.net/dtd/package-2.0 http://pear.php.net/dtd/package-2.0.xsd">
     <name>sfShoppingCart</name>
     <channel>pear.symfony-project.com</channel>
     <summary>symfony shopping cart.</summary>
     <description>symfony shopping cart.</description>
     <lead>
      <name>Fabien POTENCIER</name>
      <user>fabpot</user>
      <email>fabien.potencier@symfony-project.com</email>
      <active>yes</active>
     </lead>
     <date>2006-01-18</date>
     <time>15:54:35</time>
     <version>
      <release>1.0.0</release>
      <api>1.0.0</api>
     </version>
     <stability>
      <release>stable</release>
      <api>stable</api>
     </stability>
     <license uri="http://www.symfony-project.com/license">MIT license</license>
     <notes>-</notes>
     <contents>
      <dir name="/">
       <file baseinstalldir="symfony/plugins/sfShoppingCart" install-as="sfShoppingCart.class.php" md5sum="96e619923c27d2cfbd3da2f860632fa4" name="lib/sfShoppingCart.class.php" role="php" />
       <file baseinstalldir="symfony/plugins/sfShoppingCart" install-as="sfShoppingCartItem.class.php" md5sum="7edf5b42b0e11b491b5cba0559dc2f36" name="lib/sfShoppingCartItem.class.php" role="php" />
      </dir>
     </contents>
     <dependencies>
      <required>
       <php>
        <min>5.0.0</min>
       </php>
       <pearinstaller>
        <min>1.4.1</min>
       </pearinstaller>
       <package>
        <name>symfony</name>
        <channel>pear.symfony-project.com</channel>
        <min>0.6.0</min>
        <max>0.8.0</max>
       </package>
      </required>
     </dependencies>
     <phprelease />
     <changelog />
    </package>

The interesting parts here are the `<contents>` and the `<dependencies>` tags. For the rest of the tags, there is nothing specific to symfony, so you can refer to the PEAR  [online manual][2].

### Contents

A plug-in is a set of files that can contain several types of data. According to the type of data - or _role_ - defined in the related `<content>` tag, the file will be copied in a different location on the disk.

  Role      | Location for local     | Location for global
  ----------|------------------------|---------------------
  `php`     | `myproject/lib/`       | `PEAR_PHP_DIR/`
  `data`    | `myproject/data/`      | `PEAR_DATA_DIR/`
  `bin`     | `myproject/batch/`     | `PEAR_BIN_DIR/`
  `test`    | `myproject/test/`      | `PEAR_TEST_DIR/`
  `doc`     | `myproject/doc/`       | `PEAR_DOC_DIR/`

>**Note**: To get the value of the PEAR directories in your installation, type in the command line:

        $ pear config-show

The `baseinstalldir` attribute tells to PEAR where to copy the content referenced in the `<content>` tag. 

For instance, the 2 files of the `sfShoppingCart` plug-in are installed as follow:

  File                           |  Local install                                               |  Global install
  -------------------------------|--------------------------------------------------------------|-------------------
  `sfShoppingCart.class.php`     | `myproject/lib/symfony/plugins/sfShoppingCart.class.php`     | `PEAR_PHP_DIR/symfony/plugins/sfShoppingCart.class.php`
  `sfShoppingCartItem.class.php` | `myproject/lib/symfony/plugins/sfShoppingCartItem.class.php` | `PEAR_PHP_DIR/symfony/plugins/sfShoppingCartItem.class.php`

The contents defined with a `php` role have the great advantage of being autoloaded whether being installed locally or globally.

In addition, the choice to specify a basic tree structure pattern like `symfony/plugins/pluginName` for plug-ins ensures that they won't be lost in the PEAR of lib/ directories.

### Dependencies

Plug-ins are designed to work with a given set of versions of PHP, PEAR, symfony and sometimes other foreign libraries (like Propel) or plug-ins. Declaring these dependencies in the `<dependencies>` tag tells PEAR to check that the required packages are already installed, and to raise an exception if not.

When installing a local plug-in, the dependencies are not installed if not found. When installing a global plug-in, the PEAR configuration is used to see if the dependencies have to be installed when necessary, so beware that installing a plug-in requiring a newer version of symfony could launch the upgrade of the framework.

Building your own plug-in
-------------------------

If you decide to write a plug-in of your own, there are a few guidelines and rules to follow.

### Naming conventions

To keep the PEAR and `lib/` directories clean, we recommend that all the plug-in names are in [camelCase][3] and start with 'sf' (ex: 'sfShoppingCart', 'sfFeed', etc.). Before naming your plug-in, check that there is no existing PEAR package or symfony plug-in with the same name.

>**Note**: Plug-ins relying on Propel should contain 'Propel' in the name. For instance, an authentication plug-in using the Propel data access objects should be called 'sfPropelAuth'.

For a library, the files of role `php` should have a base install directory starting with `symfony/plugins/pluginName/`. For a module, the files should be of role `data` and have a base install directory starting with `symfony/modules/pluginName`.

### Included files

Plug-ins should include a `LICENSE` file describing the conditions of use and the chosen license. You are also advised to add a `README` file to explain the version changes, interest of the plug-in, effect, installation and configuration instructions, etc.

The files to install should be placed in directories according to their role. The `php` files should be in a `lib/` folder, the `data` files in a `data/` folder, etc.

And, of course, you have to write the `package.xml` file. Don't bother to add the `md5sum` to the `<content>` tags though, the PEAR package builder will do it for you (see below). To have an idea about how a typical pre-build `package.xml` looks like, check the ones in the [SVN repository](http://www.symfony-project.com/trac/browser/plugins).

All in all, your plug-in directory should include the following files:

    LICENSE
    README
    package.xml
    lib/
      file1.php
      ...
    data/
      ...

Most of the time, plug-ins should be able to work even if the archive is simply extracted in a `lib/` directory. Keep that in mind when designing the file structure of your own plug-in.

### Post install script

A PEAR package can include a post install script, which will manage installation operations that cannot be done with the standard PEAR mechanisms. The symfony plug-ins have access to the same feature. This allows you to setup a configuration when installing a module, add some data to a database, copy files out of the usual directories, etc.

If you want to learn more about the PEAR post-install scripts, refer to the [PEAR manual][4].

### Modules and embedded files

If your plug-in is a module, it has to embed all the necessary configuration files with it. Use the classical file structure of a module to include a `module.yml` file for instance, and all i18n materials should definitely go into a `i18n/` directory.

If your module has a specific data model, written in a `schema.xml`, you will need a post install script to copy it to the project `config/` directory for local installation. For global installations, your README file will have to specify that the `schema.xml` is to be copied manually in the `config/` directory of each project using the plug-in. In both cases, you must not override any existing `schema.xml` in the projects of the user, so it is best to call your schema `pluginName_schema.xml` (as soon as the name ends with `schema.xml`, the `propel-build-model` command will take it into account).

If your plug-in includes media files (images, css, javascripts, etc.), you should declare them with a `data` role and specify a base install directory like `symfony/web/sf/MEDIA_TYPE/pluginName/`. For instance, to store a `myimage.jpg` images for the `sfMyPlugin` plug-in, write the `<content>` tag as follows:

    [xml]
    <file baseinstalldir="symfony/web/sf/img/sfMyPlugin" install-as="myimage.jpg" name="img/myimage.jpg" role="data" />
    
Once you do a global install of the plug-in, as you already have a `sf/` symbolic link to `symfony/web/sf/` in your server configuration, the image can be addressed to as:

    [php]
    <?php echo image_tag('/sf/img/sfMyPlugin/myimage.jpg') ?>
    
The trouble is for local install. The image will be installed in `myproject/data/symfony/web/sf/img/sfMyPlugin/myimage.jpg`, and this path is not accessible to the web server. The other problem is that you cannot copy the files to a local `web/sf/` directory, since the server already has an alias for that.

The solution is to add a post install script to your PEAR package that will copy manually the media files to a `web/img/sfMyPlugin/` directory and remove the reference to the `sf/` directory in the case of a local install.

### Dependencies

You should always declare dependencies on PHP, PEAR and symfony, at least the ones corresponding to your own install, as a minimum requirement. If you don't know what to put, add a requirement for PHP 5.0, PEAR 1.4 and symfony 0.6 (plug-ins are not supported before 0.6).

We also recommend that you add a maximum version of symfony for your plug-in. This will cause an error message when trying to use your plug-in with a more advanced version of the framework, and this will oblige you to make sure that your plug-in works correctly with this version before releasing it again. It's better to have an alert and to download an upgrade rather than having a plug-in fail silently.

### Building the plug-in

The PEAR component has a command that creates the .tgz archive of the package, provided you call the following command from a directory containing a `package.xml`:

    $ pear package
    
Couldn't be easier.

Once you built your plug-in, check that it works by installing it yourself.

### Hosting your plug-in at symfony-project.com

The symfony team will be pleased to host your plug-in, provided that you respect the aforementioned rules and two additional ones:
  - the license of the plug-in must be a MIT one
  - the author of the plug-in must sign a symfony contributors license agreement

The main advantages of being hosted by symfony are that your plug-in will be visible in the symfony channel, you will have a SVN access to a subdirectory of the `plugin/` repository, and we will automatically build a beta package based on the latest SVN version of your plug-in every night.

[1]: http://pear.php.net/                                                           "PEAR website"
[2]: http://pear.php.net/manual/en/                                                 "PEAR manual"
[3]: http://en.wikipedia.org/wiki/CamelCase                                         "camelCase definition at Wikipedia"
[4]: http://pear.php.net/manual/fr/html/guide.migrating.postinstall.structure.html  "post install for PEAR documentation" 