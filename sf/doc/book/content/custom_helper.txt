How to add a custom extension
=============================

Overview
--------

Symfony offers various helpers to accelerate template development (see more in the [View chapter](view.txt)). But the need for custom helpers can arise for every project, application, or module. Symfony uses naming conventions to allow the easy inclusion of custom helpers so that they can be used the same way as the standard ones, via a simple function call in the templates. Custom classes are also easy to add thanks to the class auto-loading feature.

Custom helper
-------------

### Naming conventions

To make custom helpers available to your templates, simply create a PHP file ending with `Helper.php` and place it in a subdirectory of the PHP `include_path` named `helper`. The directory where the helper is placed will determine its availability. For instance:

| Helper placed in                     | Is available for
| ------------------------------------ | ----------------
| `lib/helper/`                        | all applications of the project
| `myapp/lib/helper/`                  | all the modules of the 'myapp' application
| `mymodule/lib/helper/`               | all the templates of the 'mymodule' module

To use a custom helper in a template, you must first declare it on top of the template, the same way you do for other helpers:

    [php]
    <?php use_helper('Name') ?>

### Example

Let's say that your application uses the wiki syntax to format the data entered by the user. The wiki to HTML conversion may occur quite often, so you will refactor the code in a 'wiki_to_html()' helper function:

Here is the `WikiHelper.php` file stored in the `myapp/lib/helper/` directory:

    [php]
    <?php
    
    function wiki_to_html($text)
    {
      require_once 'Wiki.class.php';
      $wiki = new Wiki();
      return $wiki->transform($text);
    }
    
    ?>

Here is an example template using the helper:

    [php]
    <?php use_helper('Wiki') ?>
    ...
    <p><?php echo wiki_to_html('Text with a WikiLink.') ?></p>
    
Custom classes
--------------

### Naming conventions

If you need to extend your actions with a custom class, you can take advantage of the class auto-loading feature. If the class file has the same name as the class itself, symfony will auto-load it when needed, provided it is located in one of the three directories below:

| Class placed in               | Is available for
| ----------------------------- | ------------------------------------------
| `lib/`                        | all applications of the project
| `myapp/lib/`                  | all the modules of the 'myapp' application
| `myapp/modules/mymodule/lib/` | all the templates of the 'mymodule' module


### Example

For instance, create a new `myTools.class.php` under the `myproject/lib/` directory:

    [php]
    class myTools
    {
      public static function stripText($text)
      {
        $text = strtolower($text);
    
        // strip all non word chars
        $text = preg_replace('/\W/', ' ', $text);
    
        // replace all white space sections with a dash
        $text = preg_replace('/\ +/', '-', $text);
    
        // trim dashes
        $text = preg_replace('/\-$/', '', $text);
        $text = preg_replace('/^\-/', '', $text);
    
        return $text;
      }
    }
    
Now, from any action of your project, you can use the `stripText` method of this class without declaring it previously. Just ask:

    [php]
    $my_stripped_text = myTools::stripText($my_text);

...and symfony will load the `myTools` class automatically.

Accessing context objects
-------------------------

In a custom helper, shortcuts like `$sf_request` or `$sf_user` won't work. In a custom class, the action-style calls (`$this->getRequest()`, `$this->getUser()`, etc.) won't work either. This is because these functions and classes are not in a request context. So, in order to access the context objects, you have to use the `sfContext` singleton (`sfContext::getInstance()`). For instance, to get the request parameters, write:

    [php]
    $id = sfContext::getInstance()->getRequest()->getParameter('id');
