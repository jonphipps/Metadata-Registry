generator:
  class:              sfPropelAdminGenerator
  param:
    model_class:      SchemaProperty
    theme:            default
    pager:
      no_results:     No Properties have been defined for this Schema

    fields:
      id:
         name:        ID
         type:        plain
      created_at:
        name:         Date Created
        help:         This is the date the Property was created
        type:         plain
      updated_at:
        name:         Last Updated
        help:         This is the date the Property was last updated
        type:         plain
      created_user:
        name:         Created by
        help:         This is the user who created this Property
        type:         plain
      updated_user:
        name:         Last Updated by
        help:         This is the user who updated the Property last
        type:         plain
      uri:               { name: URI, help: "This URI has been generated by the system, but you may override it" }
      name:              { name: Name, help: "This is a machine-compatible label for this property and is required for every Property" }
      label:             { name: Label, help: "This is a human-friendly label for this property and is required for every Property" }
      definition:        { name: Definition, help: "The definition of this property" }
      is_subproperty_of: { name: Subproperty of }
      status_id:         { name: Status, help: "This is the overall status of this Property. Individual elements of this property may have a different status" }
      properties:        { name: Properties }
      listproperties:    { name: " " }
      language:          { name: Language, help: "This is the default language for all elements of this property." }

    list:
      title:            Properties for %%schema%%
      fields:
        uri:            { helper: truncate_uri, help: "A link to the URI. The display may have been truncated." }
        updated_at:     { name: Updated, params: date_format='g' }
      display:          [=label, uri, status, updated_at, updated_user]
      displayfilter:    false
      object_actions:
        _edit:          { credentials: [[administrator, schemamaintainer, schemaadmin]] }
      actions:
        _create:        { name: Add Property, credentials: [[administrator, schemamaintainer, schemaadmin]] }
      filters:          [schema_id, label, updated_at, status]
      urlfilters:
        schema_id:  schema_id

    edit:
      title:
        mode:
          edit:        Editing %%label%%
          create:      Creating new property
      fields:
        id:            { credentials: [administrator], mode: edit }
        type:
          type: select_tag
          params:
            select_options:
              property:    property
              subproperty: subproperty
            onchange: swapOptions()
        language:          { type: select_language_tag }
        is_subproperty_of: { params: related_class=SchemaProperty peer_method=getPropertiesByCurrentSchemaID }
      title:               Detail for %%label%%
      hide:                [schema_id]
      display:
        "-Metadata":   { fields: [id, created_at, created_user, updated_at, updated_user], mode: edit}
        "Detail":      [name, label, definition, comment, type, is_subproperty_of, status_id, language, note, uri]
#        "Properties":  [_listproperties]
      actions:
        _list:         { query_string: { schema_id: schema_id} }
        _save:         { credentials: [[administrator, schemamaintainer, schemaadmin, schemapropadmin]] }
        _delete:       { credentials: [[administrator, schemaadmin]] }
        _create:       { name: Add Property, credentials: [[administrator, schemamaintainer, schemaadmin, schemapropadmin]], mode: edit  }
        _save_and_add: { credentials: [[administrator, schemamaintainer, schemaadmin, schemapropadmin]] }
        _cancel:       { credentials: [[administrator, schemamaintainer, schemaadmin, schemapropadmin]], query_string: { schema_id: schema_id} }

    show:
      peer_method:   doSelectJoinAll
      fields:
        id:            { credentials: [administrator] }
        uri:           { helper: auto_link_text }
      is_subproperty_of: { condition: "'subproperty' == $schema_property->getType()" }
      display:
        "-Metadata":   { fields: [id, created_at, created_user, updated_at, updated_user] }
        "Detail":      [name, label, uri, definition, comment, type, parent_property, status, _language, note]
#        "Properties":  [_listproperties]
      actions:
        _list:         { query_string: { schema_id: schema_id} }
        _edit:         { credentials: [[administrator, schemamaintainer, schemaadmin]] }
        _create:       { name: Add Property, credentials: [[administrator, schemamaintainer, schemaadmin]] }
