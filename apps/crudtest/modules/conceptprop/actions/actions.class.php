<?php
// auto-generated by sfPropelCrud
// date: 2007/02/03 15:45:25
?>
<?php

/**
 * conceptprop actions.
 *
 * @package    registry
 * @subpackage conceptprop
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class conceptpropActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('conceptprop', 'list');
  }

  public function executeList()
  {
    $this->concept_propertys = ConceptPropertyPeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
    $this->concept_property = ConceptPropertyPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->concept_property);
  }

  public function executeCreate()
  {
    $this->concept_property = new ConceptProperty();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->concept_property = ConceptPropertyPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->concept_property);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $concept_property = new ConceptProperty();
    }
    else
    {
      $concept_property = ConceptPropertyPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($concept_property);
    }

    $concept_property->setId($this->getRequestParameter('id'));
    if ($this->getRequestParameter('last_updated'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('last_updated'), $this->getUser()->getCulture());
      $concept_property->setLastUpdated("$y-$m-$d");
    }
    $concept_property->setConceptId($this->getRequestParameter('concept_id') ? $this->getRequestParameter('concept_id') : null);
    $concept_property->setSkosPropertyId($this->getRequestParameter('skos_property_id') ? $this->getRequestParameter('skos_property_id') : null);
    $concept_property->setObject($this->getRequestParameter('object'));
    $concept_property->setSchemeId($this->getRequestParameter('scheme_id') ? $this->getRequestParameter('scheme_id') : null);
    $concept_property->setRelatedConceptId($this->getRequestParameter('related_concept_id') ? $this->getRequestParameter('related_concept_id') : null);
    $concept_property->setLanguage($this->getRequestParameter('language'));
    $concept_property->setStatusId($this->getRequestParameter('status_id') ? $this->getRequestParameter('status_id') : null);

    $concept_property->save();

    return $this->redirect('conceptprop/show?id='.$concept_property->getId());
  }

  public function executeDelete()
  {
    $concept_property = ConceptPropertyPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($concept_property);

    $concept_property->delete();

    return $this->redirect('conceptprop/list');
  }
}
