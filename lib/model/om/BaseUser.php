<?php

/**
 * Base class that represents a row from the 'reg_user' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Wed Apr 22 15:10:12 2009
 *
 * @package    lib.model.om
 */
abstract class BaseUser extends BaseObject  implements Persistent {


  const PEER = 'UserPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        UserPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the last_updated field.
	 * @var        string
	 */
	protected $last_updated;

	/**
	 * The value for the deleted_at field.
	 * @var        string
	 */
	protected $deleted_at;

	/**
	 * The value for the nickname field.
	 * @var        string
	 */
	protected $nickname;

	/**
	 * The value for the salutation field.
	 * @var        string
	 */
	protected $salutation;

	/**
	 * The value for the first_name field.
	 * @var        string
	 */
	protected $first_name;

	/**
	 * The value for the last_name field.
	 * @var        string
	 */
	protected $last_name;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the sha1_password field.
	 * @var        string
	 */
	protected $sha1_password;

	/**
	 * The value for the salt field.
	 * @var        string
	 */
	protected $salt;

	/**
	 * The value for the want_to_be_moderator field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $want_to_be_moderator;

	/**
	 * The value for the is_moderator field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_moderator;

	/**
	 * The value for the is_administrator field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_administrator;

	/**
	 * The value for the deletions field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $deletions;

	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;

	/**
	 * @var        array Profile[] Collection to store aggregation of Profile objects.
	 */
	protected $collProfilesRelatedByCreatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProfilesRelatedByCreatedBy.
	 */
	private $lastProfileRelatedByCreatedByCriteria = null;

	/**
	 * @var        array Profile[] Collection to store aggregation of Profile objects.
	 */
	protected $collProfilesRelatedByUpdatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProfilesRelatedByUpdatedBy.
	 */
	private $lastProfileRelatedByUpdatedByCriteria = null;

	/**
	 * @var        array Profile[] Collection to store aggregation of Profile objects.
	 */
	protected $collProfilesRelatedByDeletedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProfilesRelatedByDeletedBy.
	 */
	private $lastProfileRelatedByDeletedByCriteria = null;

	/**
	 * @var        array Profile[] Collection to store aggregation of Profile objects.
	 */
	protected $collProfilesRelatedByChildUpdatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProfilesRelatedByChildUpdatedBy.
	 */
	private $lastProfileRelatedByChildUpdatedByCriteria = null;

	/**
	 * @var        array ProfileProperty[] Collection to store aggregation of ProfileProperty objects.
	 */
	protected $collProfilePropertysRelatedByCreatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProfilePropertysRelatedByCreatedBy.
	 */
	private $lastProfilePropertyRelatedByCreatedByCriteria = null;

	/**
	 * @var        array ProfileProperty[] Collection to store aggregation of ProfileProperty objects.
	 */
	protected $collProfilePropertysRelatedByUpdatedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProfilePropertysRelatedByUpdatedBy.
	 */
	private $lastProfilePropertyRelatedByUpdatedByCriteria = null;

	/**
	 * @var        array ProfileProperty[] Collection to store aggregation of ProfileProperty objects.
	 */
	protected $collProfilePropertysRelatedByDeletedBy;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProfilePropertysRelatedByDeletedBy.
	 */
	private $lastProfilePropertyRelatedByDeletedByCriteria = null;

	/**
	 * @var        array AgentHasUser[] Collection to store aggregation of AgentHasUser objects.
	 */
	protected $collAgentHasUsers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAgentHasUsers.
	 */
	private $lastAgentHasUserCriteria = null;

	/**
	 * @var        array Concept[] Collection to store aggregation of Concept objects.
	 */
	protected $collConceptsRelatedByCreatedUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collConceptsRelatedByCreatedUserId.
	 */
	private $lastConceptRelatedByCreatedUserIdCriteria = null;

	/**
	 * @var        array Concept[] Collection to store aggregation of Concept objects.
	 */
	protected $collConceptsRelatedByUpdatedUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collConceptsRelatedByUpdatedUserId.
	 */
	private $lastConceptRelatedByUpdatedUserIdCriteria = null;

	/**
	 * @var        array ConceptProperty[] Collection to store aggregation of ConceptProperty objects.
	 */
	protected $collConceptPropertysRelatedByCreatedUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collConceptPropertysRelatedByCreatedUserId.
	 */
	private $lastConceptPropertyRelatedByCreatedUserIdCriteria = null;

	/**
	 * @var        array ConceptProperty[] Collection to store aggregation of ConceptProperty objects.
	 */
	protected $collConceptPropertysRelatedByUpdatedUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collConceptPropertysRelatedByUpdatedUserId.
	 */
	private $lastConceptPropertyRelatedByUpdatedUserIdCriteria = null;

	/**
	 * @var        array ConceptPropertyHistory[] Collection to store aggregation of ConceptPropertyHistory objects.
	 */
	protected $collConceptPropertyHistorys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collConceptPropertyHistorys.
	 */
	private $lastConceptPropertyHistoryCriteria = null;

	/**
	 * @var        array Schema[] Collection to store aggregation of Schema objects.
	 */
	protected $collSchemasRelatedByCreatedUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSchemasRelatedByCreatedUserId.
	 */
	private $lastSchemaRelatedByCreatedUserIdCriteria = null;

	/**
	 * @var        array Schema[] Collection to store aggregation of Schema objects.
	 */
	protected $collSchemasRelatedByUpdatedUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSchemasRelatedByUpdatedUserId.
	 */
	private $lastSchemaRelatedByUpdatedUserIdCriteria = null;

	/**
	 * @var        array SchemaProperty[] Collection to store aggregation of SchemaProperty objects.
	 */
	protected $collSchemaPropertysRelatedByCreatedUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSchemaPropertysRelatedByCreatedUserId.
	 */
	private $lastSchemaPropertyRelatedByCreatedUserIdCriteria = null;

	/**
	 * @var        array SchemaProperty[] Collection to store aggregation of SchemaProperty objects.
	 */
	protected $collSchemaPropertysRelatedByUpdatedUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSchemaPropertysRelatedByUpdatedUserId.
	 */
	private $lastSchemaPropertyRelatedByUpdatedUserIdCriteria = null;

	/**
	 * @var        array SchemaPropertyElement[] Collection to store aggregation of SchemaPropertyElement objects.
	 */
	protected $collSchemaPropertyElementsRelatedByCreatedUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSchemaPropertyElementsRelatedByCreatedUserId.
	 */
	private $lastSchemaPropertyElementRelatedByCreatedUserIdCriteria = null;

	/**
	 * @var        array SchemaPropertyElement[] Collection to store aggregation of SchemaPropertyElement objects.
	 */
	protected $collSchemaPropertyElementsRelatedByUpdatedUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSchemaPropertyElementsRelatedByUpdatedUserId.
	 */
	private $lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria = null;

	/**
	 * @var        array SchemaPropertyElementHistory[] Collection to store aggregation of SchemaPropertyElementHistory objects.
	 */
	protected $collSchemaPropertyElementHistorys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSchemaPropertyElementHistorys.
	 */
	private $lastSchemaPropertyElementHistoryCriteria = null;

	/**
	 * @var        array Vocabulary[] Collection to store aggregation of Vocabulary objects.
	 */
	protected $collVocabularysRelatedByCreatedUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collVocabularysRelatedByCreatedUserId.
	 */
	private $lastVocabularyRelatedByCreatedUserIdCriteria = null;

	/**
	 * @var        array Vocabulary[] Collection to store aggregation of Vocabulary objects.
	 */
	protected $collVocabularysRelatedByUpdatedUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collVocabularysRelatedByUpdatedUserId.
	 */
	private $lastVocabularyRelatedByUpdatedUserIdCriteria = null;

	/**
	 * @var        array Vocabulary[] Collection to store aggregation of Vocabulary objects.
	 */
	protected $collVocabularysRelatedByChildUpdatedUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collVocabularysRelatedByChildUpdatedUserId.
	 */
	private $lastVocabularyRelatedByChildUpdatedUserIdCriteria = null;

	/**
	 * @var        array VocabularyHasUser[] Collection to store aggregation of VocabularyHasUser objects.
	 */
	protected $collVocabularyHasUsers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collVocabularyHasUsers.
	 */
	private $lastVocabularyHasUserCriteria = null;

	/**
	 * @var        array VocabularyHasVersion[] Collection to store aggregation of VocabularyHasVersion objects.
	 */
	protected $collVocabularyHasVersions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collVocabularyHasVersions.
	 */
	private $lastVocabularyHasVersionCriteria = null;

	/**
	 * @var        array SchemaHasUser[] Collection to store aggregation of SchemaHasUser objects.
	 */
	protected $collSchemaHasUsers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSchemaHasUsers.
	 */
	private $lastSchemaHasUserCriteria = null;

	/**
	 * @var        array SchemaHasVersion[] Collection to store aggregation of SchemaHasVersion objects.
	 */
	protected $collSchemaHasVersions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSchemaHasVersions.
	 */
	private $lastSchemaHasVersionCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseUser object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->want_to_be_moderator = false;
		$this->is_moderator = false;
		$this->is_administrator = false;
		$this->deletions = 0;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [last_updated] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getLastUpdated($format = 'Y-m-d H:i:s')
	{
		if ($this->last_updated === null) {
			return null;
		}


		if ($this->last_updated === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->last_updated);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->last_updated, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [deleted_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDeletedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->deleted_at === null) {
			return null;
		}


		if ($this->deleted_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->deleted_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->deleted_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [nickname] column value.
	 * 
	 * @return     string
	 */
	public function getNickname()
	{
		return $this->nickname;
	}

	/**
	 * Get the [salutation] column value.
	 * 
	 * @return     string
	 */
	public function getSalutation()
	{
		return $this->salutation;
	}

	/**
	 * Get the [first_name] column value.
	 * 
	 * @return     string
	 */
	public function getFirstName()
	{
		return $this->first_name;
	}

	/**
	 * Get the [last_name] column value.
	 * 
	 * @return     string
	 */
	public function getLastName()
	{
		return $this->last_name;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [sha1_password] column value.
	 * 
	 * @return     string
	 */
	public function getSha1Password()
	{
		return $this->sha1_password;
	}

	/**
	 * Get the [salt] column value.
	 * 
	 * @return     string
	 */
	public function getSalt()
	{
		return $this->salt;
	}

	/**
	 * Get the [want_to_be_moderator] column value.
	 * 
	 * @return     boolean
	 */
	public function getWantToBeModerator()
	{
		return $this->want_to_be_moderator;
	}

	/**
	 * Get the [is_moderator] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsModerator()
	{
		return $this->is_moderator;
	}

	/**
	 * Get the [is_administrator] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsAdministrator()
	{
		return $this->is_administrator;
	}

	/**
	 * Get the [deletions] column value.
	 * 
	 * @return     int
	 */
	public function getDeletions()
	{
		return $this->deletions;
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = UserPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     User The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UserPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [last_updated] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     User The current object (for fluent API support)
	 */
	public function setLastUpdated($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->last_updated !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->last_updated !== null && $tmpDt = new DateTime($this->last_updated)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->last_updated = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UserPeer::LAST_UPDATED;
			}
		} // if either are not null

		return $this;
	} // setLastUpdated()

	/**
	 * Sets the value of [deleted_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     User The current object (for fluent API support)
	 */
	public function setDeletedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->deleted_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->deleted_at !== null && $tmpDt = new DateTime($this->deleted_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->deleted_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UserPeer::DELETED_AT;
			}
		} // if either are not null

		return $this;
	} // setDeletedAt()

	/**
	 * Set the value of [nickname] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setNickname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nickname !== $v) {
			$this->nickname = $v;
			$this->modifiedColumns[] = UserPeer::NICKNAME;
		}

		return $this;
	} // setNickname()

	/**
	 * Set the value of [salutation] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setSalutation($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->salutation !== $v) {
			$this->salutation = $v;
			$this->modifiedColumns[] = UserPeer::SALUTATION;
		}

		return $this;
	} // setSalutation()

	/**
	 * Set the value of [first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->first_name !== $v) {
			$this->first_name = $v;
			$this->modifiedColumns[] = UserPeer::FIRST_NAME;
		}

		return $this;
	} // setFirstName()

	/**
	 * Set the value of [last_name] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setLastName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->last_name !== $v) {
			$this->last_name = $v;
			$this->modifiedColumns[] = UserPeer::LAST_NAME;
		}

		return $this;
	} // setLastName()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = UserPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [sha1_password] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setSha1Password($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sha1_password !== $v) {
			$this->sha1_password = $v;
			$this->modifiedColumns[] = UserPeer::SHA1_PASSWORD;
		}

		return $this;
	} // setSha1Password()

	/**
	 * Set the value of [salt] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setSalt($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->salt !== $v) {
			$this->salt = $v;
			$this->modifiedColumns[] = UserPeer::SALT;
		}

		return $this;
	} // setSalt()

	/**
	 * Set the value of [want_to_be_moderator] column.
	 * 
	 * @param      boolean $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setWantToBeModerator($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->want_to_be_moderator !== $v || $v === false) {
			$this->want_to_be_moderator = $v;
			$this->modifiedColumns[] = UserPeer::WANT_TO_BE_MODERATOR;
		}

		return $this;
	} // setWantToBeModerator()

	/**
	 * Set the value of [is_moderator] column.
	 * 
	 * @param      boolean $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setIsModerator($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_moderator !== $v || $v === false) {
			$this->is_moderator = $v;
			$this->modifiedColumns[] = UserPeer::IS_MODERATOR;
		}

		return $this;
	} // setIsModerator()

	/**
	 * Set the value of [is_administrator] column.
	 * 
	 * @param      boolean $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setIsAdministrator($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_administrator !== $v || $v === false) {
			$this->is_administrator = $v;
			$this->modifiedColumns[] = UserPeer::IS_ADMINISTRATOR;
		}

		return $this;
	} // setIsAdministrator()

	/**
	 * Set the value of [deletions] column.
	 * 
	 * @param      int $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setDeletions($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->deletions !== $v || $v === 0) {
			$this->deletions = $v;
			$this->modifiedColumns[] = UserPeer::DELETIONS;
		}

		return $this;
	} // setDeletions()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     User The current object (for fluent API support)
	 */
	public function setPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = UserPeer::PASSWORD;
		}

		return $this;
	} // setPassword()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(UserPeer::WANT_TO_BE_MODERATOR,UserPeer::IS_MODERATOR,UserPeer::IS_ADMINISTRATOR,UserPeer::DELETIONS))) {
				return false;
			}

			if ($this->want_to_be_moderator !== false) {
				return false;
			}

			if ($this->is_moderator !== false) {
				return false;
			}

			if ($this->is_administrator !== false) {
				return false;
			}

			if ($this->deletions !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->created_at = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->last_updated = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->deleted_at = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->nickname = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->salutation = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->first_name = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->last_name = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->email = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->sha1_password = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->salt = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->want_to_be_moderator = ($row[$startcol + 11] !== null) ? (boolean) $row[$startcol + 11] : null;
			$this->is_moderator = ($row[$startcol + 12] !== null) ? (boolean) $row[$startcol + 12] : null;
			$this->is_administrator = ($row[$startcol + 13] !== null) ? (boolean) $row[$startcol + 13] : null;
			$this->deletions = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->password = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 16; // 16 = UserPeer::NUM_COLUMNS - UserPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating User object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = UserPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collProfilesRelatedByCreatedBy = null;
			$this->lastProfileRelatedByCreatedByCriteria = null;

			$this->collProfilesRelatedByUpdatedBy = null;
			$this->lastProfileRelatedByUpdatedByCriteria = null;

			$this->collProfilesRelatedByDeletedBy = null;
			$this->lastProfileRelatedByDeletedByCriteria = null;

			$this->collProfilesRelatedByChildUpdatedBy = null;
			$this->lastProfileRelatedByChildUpdatedByCriteria = null;

			$this->collProfilePropertysRelatedByCreatedBy = null;
			$this->lastProfilePropertyRelatedByCreatedByCriteria = null;

			$this->collProfilePropertysRelatedByUpdatedBy = null;
			$this->lastProfilePropertyRelatedByUpdatedByCriteria = null;

			$this->collProfilePropertysRelatedByDeletedBy = null;
			$this->lastProfilePropertyRelatedByDeletedByCriteria = null;

			$this->collAgentHasUsers = null;
			$this->lastAgentHasUserCriteria = null;

			$this->collConceptsRelatedByCreatedUserId = null;
			$this->lastConceptRelatedByCreatedUserIdCriteria = null;

			$this->collConceptsRelatedByUpdatedUserId = null;
			$this->lastConceptRelatedByUpdatedUserIdCriteria = null;

			$this->collConceptPropertysRelatedByCreatedUserId = null;
			$this->lastConceptPropertyRelatedByCreatedUserIdCriteria = null;

			$this->collConceptPropertysRelatedByUpdatedUserId = null;
			$this->lastConceptPropertyRelatedByUpdatedUserIdCriteria = null;

			$this->collConceptPropertyHistorys = null;
			$this->lastConceptPropertyHistoryCriteria = null;

			$this->collSchemasRelatedByCreatedUserId = null;
			$this->lastSchemaRelatedByCreatedUserIdCriteria = null;

			$this->collSchemasRelatedByUpdatedUserId = null;
			$this->lastSchemaRelatedByUpdatedUserIdCriteria = null;

			$this->collSchemaPropertysRelatedByCreatedUserId = null;
			$this->lastSchemaPropertyRelatedByCreatedUserIdCriteria = null;

			$this->collSchemaPropertysRelatedByUpdatedUserId = null;
			$this->lastSchemaPropertyRelatedByUpdatedUserIdCriteria = null;

			$this->collSchemaPropertyElementsRelatedByCreatedUserId = null;
			$this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria = null;

			$this->collSchemaPropertyElementsRelatedByUpdatedUserId = null;
			$this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria = null;

			$this->collSchemaPropertyElementHistorys = null;
			$this->lastSchemaPropertyElementHistoryCriteria = null;

			$this->collVocabularysRelatedByCreatedUserId = null;
			$this->lastVocabularyRelatedByCreatedUserIdCriteria = null;

			$this->collVocabularysRelatedByUpdatedUserId = null;
			$this->lastVocabularyRelatedByUpdatedUserIdCriteria = null;

			$this->collVocabularysRelatedByChildUpdatedUserId = null;
			$this->lastVocabularyRelatedByChildUpdatedUserIdCriteria = null;

			$this->collVocabularyHasUsers = null;
			$this->lastVocabularyHasUserCriteria = null;

			$this->collVocabularyHasVersions = null;
			$this->lastVocabularyHasVersionCriteria = null;

			$this->collSchemaHasUsers = null;
			$this->lastSchemaHasUserCriteria = null;

			$this->collSchemaHasVersions = null;
			$this->lastSchemaHasVersionCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseUser:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			UserPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseUser:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseUser:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(UserPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseUser:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			UserPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = UserPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = UserPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += UserPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collProfilesRelatedByCreatedBy !== null) {
				foreach ($this->collProfilesRelatedByCreatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProfilesRelatedByUpdatedBy !== null) {
				foreach ($this->collProfilesRelatedByUpdatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProfilesRelatedByDeletedBy !== null) {
				foreach ($this->collProfilesRelatedByDeletedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProfilesRelatedByChildUpdatedBy !== null) {
				foreach ($this->collProfilesRelatedByChildUpdatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProfilePropertysRelatedByCreatedBy !== null) {
				foreach ($this->collProfilePropertysRelatedByCreatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProfilePropertysRelatedByUpdatedBy !== null) {
				foreach ($this->collProfilePropertysRelatedByUpdatedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProfilePropertysRelatedByDeletedBy !== null) {
				foreach ($this->collProfilePropertysRelatedByDeletedBy as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAgentHasUsers !== null) {
				foreach ($this->collAgentHasUsers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collConceptsRelatedByCreatedUserId !== null) {
				foreach ($this->collConceptsRelatedByCreatedUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collConceptsRelatedByUpdatedUserId !== null) {
				foreach ($this->collConceptsRelatedByUpdatedUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collConceptPropertysRelatedByCreatedUserId !== null) {
				foreach ($this->collConceptPropertysRelatedByCreatedUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collConceptPropertysRelatedByUpdatedUserId !== null) {
				foreach ($this->collConceptPropertysRelatedByUpdatedUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collConceptPropertyHistorys !== null) {
				foreach ($this->collConceptPropertyHistorys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSchemasRelatedByCreatedUserId !== null) {
				foreach ($this->collSchemasRelatedByCreatedUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSchemasRelatedByUpdatedUserId !== null) {
				foreach ($this->collSchemasRelatedByUpdatedUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSchemaPropertysRelatedByCreatedUserId !== null) {
				foreach ($this->collSchemaPropertysRelatedByCreatedUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSchemaPropertysRelatedByUpdatedUserId !== null) {
				foreach ($this->collSchemaPropertysRelatedByUpdatedUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSchemaPropertyElementsRelatedByCreatedUserId !== null) {
				foreach ($this->collSchemaPropertyElementsRelatedByCreatedUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSchemaPropertyElementsRelatedByUpdatedUserId !== null) {
				foreach ($this->collSchemaPropertyElementsRelatedByUpdatedUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSchemaPropertyElementHistorys !== null) {
				foreach ($this->collSchemaPropertyElementHistorys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collVocabularysRelatedByCreatedUserId !== null) {
				foreach ($this->collVocabularysRelatedByCreatedUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collVocabularysRelatedByUpdatedUserId !== null) {
				foreach ($this->collVocabularysRelatedByUpdatedUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collVocabularysRelatedByChildUpdatedUserId !== null) {
				foreach ($this->collVocabularysRelatedByChildUpdatedUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collVocabularyHasUsers !== null) {
				foreach ($this->collVocabularyHasUsers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collVocabularyHasVersions !== null) {
				foreach ($this->collVocabularyHasVersions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSchemaHasUsers !== null) {
				foreach ($this->collSchemaHasUsers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSchemaHasVersions !== null) {
				foreach ($this->collSchemaHasVersions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = UserPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collProfilesRelatedByCreatedBy !== null) {
					foreach ($this->collProfilesRelatedByCreatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProfilesRelatedByUpdatedBy !== null) {
					foreach ($this->collProfilesRelatedByUpdatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProfilesRelatedByDeletedBy !== null) {
					foreach ($this->collProfilesRelatedByDeletedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProfilesRelatedByChildUpdatedBy !== null) {
					foreach ($this->collProfilesRelatedByChildUpdatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProfilePropertysRelatedByCreatedBy !== null) {
					foreach ($this->collProfilePropertysRelatedByCreatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProfilePropertysRelatedByUpdatedBy !== null) {
					foreach ($this->collProfilePropertysRelatedByUpdatedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProfilePropertysRelatedByDeletedBy !== null) {
					foreach ($this->collProfilePropertysRelatedByDeletedBy as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAgentHasUsers !== null) {
					foreach ($this->collAgentHasUsers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collConceptsRelatedByCreatedUserId !== null) {
					foreach ($this->collConceptsRelatedByCreatedUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collConceptsRelatedByUpdatedUserId !== null) {
					foreach ($this->collConceptsRelatedByUpdatedUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collConceptPropertysRelatedByCreatedUserId !== null) {
					foreach ($this->collConceptPropertysRelatedByCreatedUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collConceptPropertysRelatedByUpdatedUserId !== null) {
					foreach ($this->collConceptPropertysRelatedByUpdatedUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collConceptPropertyHistorys !== null) {
					foreach ($this->collConceptPropertyHistorys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSchemasRelatedByCreatedUserId !== null) {
					foreach ($this->collSchemasRelatedByCreatedUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSchemasRelatedByUpdatedUserId !== null) {
					foreach ($this->collSchemasRelatedByUpdatedUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSchemaPropertysRelatedByCreatedUserId !== null) {
					foreach ($this->collSchemaPropertysRelatedByCreatedUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSchemaPropertysRelatedByUpdatedUserId !== null) {
					foreach ($this->collSchemaPropertysRelatedByUpdatedUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSchemaPropertyElementsRelatedByCreatedUserId !== null) {
					foreach ($this->collSchemaPropertyElementsRelatedByCreatedUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSchemaPropertyElementsRelatedByUpdatedUserId !== null) {
					foreach ($this->collSchemaPropertyElementsRelatedByUpdatedUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSchemaPropertyElementHistorys !== null) {
					foreach ($this->collSchemaPropertyElementHistorys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collVocabularysRelatedByCreatedUserId !== null) {
					foreach ($this->collVocabularysRelatedByCreatedUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collVocabularysRelatedByUpdatedUserId !== null) {
					foreach ($this->collVocabularysRelatedByUpdatedUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collVocabularysRelatedByChildUpdatedUserId !== null) {
					foreach ($this->collVocabularysRelatedByChildUpdatedUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collVocabularyHasUsers !== null) {
					foreach ($this->collVocabularyHasUsers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collVocabularyHasVersions !== null) {
					foreach ($this->collVocabularyHasVersions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSchemaHasUsers !== null) {
					foreach ($this->collSchemaHasUsers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSchemaHasVersions !== null) {
					foreach ($this->collSchemaHasVersions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getCreatedAt();
				break;
			case 2:
				return $this->getLastUpdated();
				break;
			case 3:
				return $this->getDeletedAt();
				break;
			case 4:
				return $this->getNickname();
				break;
			case 5:
				return $this->getSalutation();
				break;
			case 6:
				return $this->getFirstName();
				break;
			case 7:
				return $this->getLastName();
				break;
			case 8:
				return $this->getEmail();
				break;
			case 9:
				return $this->getSha1Password();
				break;
			case 10:
				return $this->getSalt();
				break;
			case 11:
				return $this->getWantToBeModerator();
				break;
			case 12:
				return $this->getIsModerator();
				break;
			case 13:
				return $this->getIsAdministrator();
				break;
			case 14:
				return $this->getDeletions();
				break;
			case 15:
				return $this->getPassword();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = UserPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getCreatedAt(),
			$keys[2] => $this->getLastUpdated(),
			$keys[3] => $this->getDeletedAt(),
			$keys[4] => $this->getNickname(),
			$keys[5] => $this->getSalutation(),
			$keys[6] => $this->getFirstName(),
			$keys[7] => $this->getLastName(),
			$keys[8] => $this->getEmail(),
			$keys[9] => $this->getSha1Password(),
			$keys[10] => $this->getSalt(),
			$keys[11] => $this->getWantToBeModerator(),
			$keys[12] => $this->getIsModerator(),
			$keys[13] => $this->getIsAdministrator(),
			$keys[14] => $this->getDeletions(),
			$keys[15] => $this->getPassword(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setCreatedAt($value);
				break;
			case 2:
				$this->setLastUpdated($value);
				break;
			case 3:
				$this->setDeletedAt($value);
				break;
			case 4:
				$this->setNickname($value);
				break;
			case 5:
				$this->setSalutation($value);
				break;
			case 6:
				$this->setFirstName($value);
				break;
			case 7:
				$this->setLastName($value);
				break;
			case 8:
				$this->setEmail($value);
				break;
			case 9:
				$this->setSha1Password($value);
				break;
			case 10:
				$this->setSalt($value);
				break;
			case 11:
				$this->setWantToBeModerator($value);
				break;
			case 12:
				$this->setIsModerator($value);
				break;
			case 13:
				$this->setIsAdministrator($value);
				break;
			case 14:
				$this->setDeletions($value);
				break;
			case 15:
				$this->setPassword($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = UserPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCreatedAt($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setLastUpdated($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setDeletedAt($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNickname($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setSalutation($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setFirstName($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setLastName($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setEmail($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setSha1Password($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setSalt($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setWantToBeModerator($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setIsModerator($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setIsAdministrator($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setDeletions($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setPassword($arr[$keys[15]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UserPeer::DATABASE_NAME);

		if ($this->isColumnModified(UserPeer::ID)) $criteria->add(UserPeer::ID, $this->id);
		if ($this->isColumnModified(UserPeer::CREATED_AT)) $criteria->add(UserPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(UserPeer::LAST_UPDATED)) $criteria->add(UserPeer::LAST_UPDATED, $this->last_updated);
		if ($this->isColumnModified(UserPeer::DELETED_AT)) $criteria->add(UserPeer::DELETED_AT, $this->deleted_at);
		if ($this->isColumnModified(UserPeer::NICKNAME)) $criteria->add(UserPeer::NICKNAME, $this->nickname);
		if ($this->isColumnModified(UserPeer::SALUTATION)) $criteria->add(UserPeer::SALUTATION, $this->salutation);
		if ($this->isColumnModified(UserPeer::FIRST_NAME)) $criteria->add(UserPeer::FIRST_NAME, $this->first_name);
		if ($this->isColumnModified(UserPeer::LAST_NAME)) $criteria->add(UserPeer::LAST_NAME, $this->last_name);
		if ($this->isColumnModified(UserPeer::EMAIL)) $criteria->add(UserPeer::EMAIL, $this->email);
		if ($this->isColumnModified(UserPeer::SHA1_PASSWORD)) $criteria->add(UserPeer::SHA1_PASSWORD, $this->sha1_password);
		if ($this->isColumnModified(UserPeer::SALT)) $criteria->add(UserPeer::SALT, $this->salt);
		if ($this->isColumnModified(UserPeer::WANT_TO_BE_MODERATOR)) $criteria->add(UserPeer::WANT_TO_BE_MODERATOR, $this->want_to_be_moderator);
		if ($this->isColumnModified(UserPeer::IS_MODERATOR)) $criteria->add(UserPeer::IS_MODERATOR, $this->is_moderator);
		if ($this->isColumnModified(UserPeer::IS_ADMINISTRATOR)) $criteria->add(UserPeer::IS_ADMINISTRATOR, $this->is_administrator);
		if ($this->isColumnModified(UserPeer::DELETIONS)) $criteria->add(UserPeer::DELETIONS, $this->deletions);
		if ($this->isColumnModified(UserPeer::PASSWORD)) $criteria->add(UserPeer::PASSWORD, $this->password);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UserPeer::DATABASE_NAME);

		$criteria->add(UserPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of User (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setLastUpdated($this->last_updated);

		$copyObj->setDeletedAt($this->deleted_at);

		$copyObj->setNickname($this->nickname);

		$copyObj->setSalutation($this->salutation);

		$copyObj->setFirstName($this->first_name);

		$copyObj->setLastName($this->last_name);

		$copyObj->setEmail($this->email);

		$copyObj->setSha1Password($this->sha1_password);

		$copyObj->setSalt($this->salt);

		$copyObj->setWantToBeModerator($this->want_to_be_moderator);

		$copyObj->setIsModerator($this->is_moderator);

		$copyObj->setIsAdministrator($this->is_administrator);

		$copyObj->setDeletions($this->deletions);

		$copyObj->setPassword($this->password);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getProfilesRelatedByCreatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProfileRelatedByCreatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProfilesRelatedByUpdatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProfileRelatedByUpdatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProfilesRelatedByDeletedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProfileRelatedByDeletedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProfilesRelatedByChildUpdatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProfileRelatedByChildUpdatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProfilePropertysRelatedByCreatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProfilePropertyRelatedByCreatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProfilePropertysRelatedByUpdatedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProfilePropertyRelatedByUpdatedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProfilePropertysRelatedByDeletedBy() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProfilePropertyRelatedByDeletedBy($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAgentHasUsers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAgentHasUser($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getConceptsRelatedByCreatedUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addConceptRelatedByCreatedUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getConceptsRelatedByUpdatedUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addConceptRelatedByUpdatedUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getConceptPropertysRelatedByCreatedUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addConceptPropertyRelatedByCreatedUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getConceptPropertysRelatedByUpdatedUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addConceptPropertyRelatedByUpdatedUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getConceptPropertyHistorys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addConceptPropertyHistory($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSchemasRelatedByCreatedUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSchemaRelatedByCreatedUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSchemasRelatedByUpdatedUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSchemaRelatedByUpdatedUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSchemaPropertysRelatedByCreatedUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSchemaPropertyRelatedByCreatedUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSchemaPropertysRelatedByUpdatedUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSchemaPropertyRelatedByUpdatedUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSchemaPropertyElementsRelatedByCreatedUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSchemaPropertyElementRelatedByCreatedUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSchemaPropertyElementsRelatedByUpdatedUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSchemaPropertyElementRelatedByUpdatedUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSchemaPropertyElementHistorys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSchemaPropertyElementHistory($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getVocabularysRelatedByCreatedUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVocabularyRelatedByCreatedUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getVocabularysRelatedByUpdatedUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVocabularyRelatedByUpdatedUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getVocabularysRelatedByChildUpdatedUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVocabularyRelatedByChildUpdatedUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getVocabularyHasUsers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVocabularyHasUser($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getVocabularyHasVersions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVocabularyHasVersion($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSchemaHasUsers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSchemaHasUser($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSchemaHasVersions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSchemaHasVersion($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     User Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     UserPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UserPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collProfilesRelatedByCreatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProfilesRelatedByCreatedBy()
	 */
	public function clearProfilesRelatedByCreatedBy()
	{
		$this->collProfilesRelatedByCreatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProfilesRelatedByCreatedBy collection (array).
	 *
	 * By default this just sets the collProfilesRelatedByCreatedBy collection to an empty array (like clearcollProfilesRelatedByCreatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProfilesRelatedByCreatedBy()
	{
		$this->collProfilesRelatedByCreatedBy = array();
	}

	/**
	 * Gets an array of Profile objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related ProfilesRelatedByCreatedBy from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Profile[]
	 * @throws     PropelException
	 */
	public function getProfilesRelatedByCreatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesRelatedByCreatedBy === null) {
			if ($this->isNew()) {
			   $this->collProfilesRelatedByCreatedBy = array();
			} else {

				$criteria->add(ProfilePeer::CREATED_BY, $this->id);

				ProfilePeer::addSelectColumns($criteria);
				$this->collProfilesRelatedByCreatedBy = ProfilePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProfilePeer::CREATED_BY, $this->id);

				ProfilePeer::addSelectColumns($criteria);
				if (!isset($this->lastProfileRelatedByCreatedByCriteria) || !$this->lastProfileRelatedByCreatedByCriteria->equals($criteria)) {
					$this->collProfilesRelatedByCreatedBy = ProfilePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProfileRelatedByCreatedByCriteria = $criteria;
		return $this->collProfilesRelatedByCreatedBy;
	}

	/**
	 * Returns the number of related Profile objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Profile objects.
	 * @throws     PropelException
	 */
	public function countProfilesRelatedByCreatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProfilesRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProfilePeer::CREATED_BY, $this->id);

				$count = ProfilePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProfilePeer::CREATED_BY, $this->id);

				if (!isset($this->lastProfileRelatedByCreatedByCriteria) || !$this->lastProfileRelatedByCreatedByCriteria->equals($criteria)) {
					$count = ProfilePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collProfilesRelatedByCreatedBy);
				}
			} else {
				$count = count($this->collProfilesRelatedByCreatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Profile object to this object
	 * through the Profile foreign key attribute.
	 *
	 * @param      Profile $l Profile
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProfileRelatedByCreatedBy(Profile $l)
	{
		if ($this->collProfilesRelatedByCreatedBy === null) {
			$this->initProfilesRelatedByCreatedBy();
		}
		if (!in_array($l, $this->collProfilesRelatedByCreatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProfilesRelatedByCreatedBy, $l);
			$l->setUserRelatedByCreatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilesRelatedByCreatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilesRelatedByCreatedByJoinAgent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$this->collProfilesRelatedByCreatedBy = array();
			} else {

				$criteria->add(ProfilePeer::CREATED_BY, $this->id);

				$this->collProfilesRelatedByCreatedBy = ProfilePeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePeer::CREATED_BY, $this->id);

			if (!isset($this->lastProfileRelatedByCreatedByCriteria) || !$this->lastProfileRelatedByCreatedByCriteria->equals($criteria)) {
				$this->collProfilesRelatedByCreatedBy = ProfilePeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfileRelatedByCreatedByCriteria = $criteria;

		return $this->collProfilesRelatedByCreatedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilesRelatedByCreatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilesRelatedByCreatedByJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$this->collProfilesRelatedByCreatedBy = array();
			} else {

				$criteria->add(ProfilePeer::CREATED_BY, $this->id);

				$this->collProfilesRelatedByCreatedBy = ProfilePeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePeer::CREATED_BY, $this->id);

			if (!isset($this->lastProfileRelatedByCreatedByCriteria) || !$this->lastProfileRelatedByCreatedByCriteria->equals($criteria)) {
				$this->collProfilesRelatedByCreatedBy = ProfilePeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfileRelatedByCreatedByCriteria = $criteria;

		return $this->collProfilesRelatedByCreatedBy;
	}

	/**
	 * Clears out the collProfilesRelatedByUpdatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProfilesRelatedByUpdatedBy()
	 */
	public function clearProfilesRelatedByUpdatedBy()
	{
		$this->collProfilesRelatedByUpdatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProfilesRelatedByUpdatedBy collection (array).
	 *
	 * By default this just sets the collProfilesRelatedByUpdatedBy collection to an empty array (like clearcollProfilesRelatedByUpdatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProfilesRelatedByUpdatedBy()
	{
		$this->collProfilesRelatedByUpdatedBy = array();
	}

	/**
	 * Gets an array of Profile objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related ProfilesRelatedByUpdatedBy from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Profile[]
	 * @throws     PropelException
	 */
	public function getProfilesRelatedByUpdatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
			   $this->collProfilesRelatedByUpdatedBy = array();
			} else {

				$criteria->add(ProfilePeer::UPDATED_BY, $this->id);

				ProfilePeer::addSelectColumns($criteria);
				$this->collProfilesRelatedByUpdatedBy = ProfilePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProfilePeer::UPDATED_BY, $this->id);

				ProfilePeer::addSelectColumns($criteria);
				if (!isset($this->lastProfileRelatedByUpdatedByCriteria) || !$this->lastProfileRelatedByUpdatedByCriteria->equals($criteria)) {
					$this->collProfilesRelatedByUpdatedBy = ProfilePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProfileRelatedByUpdatedByCriteria = $criteria;
		return $this->collProfilesRelatedByUpdatedBy;
	}

	/**
	 * Returns the number of related Profile objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Profile objects.
	 * @throws     PropelException
	 */
	public function countProfilesRelatedByUpdatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProfilesRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProfilePeer::UPDATED_BY, $this->id);

				$count = ProfilePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProfilePeer::UPDATED_BY, $this->id);

				if (!isset($this->lastProfileRelatedByUpdatedByCriteria) || !$this->lastProfileRelatedByUpdatedByCriteria->equals($criteria)) {
					$count = ProfilePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collProfilesRelatedByUpdatedBy);
				}
			} else {
				$count = count($this->collProfilesRelatedByUpdatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Profile object to this object
	 * through the Profile foreign key attribute.
	 *
	 * @param      Profile $l Profile
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProfileRelatedByUpdatedBy(Profile $l)
	{
		if ($this->collProfilesRelatedByUpdatedBy === null) {
			$this->initProfilesRelatedByUpdatedBy();
		}
		if (!in_array($l, $this->collProfilesRelatedByUpdatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProfilesRelatedByUpdatedBy, $l);
			$l->setUserRelatedByUpdatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilesRelatedByUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilesRelatedByUpdatedByJoinAgent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collProfilesRelatedByUpdatedBy = array();
			} else {

				$criteria->add(ProfilePeer::UPDATED_BY, $this->id);

				$this->collProfilesRelatedByUpdatedBy = ProfilePeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePeer::UPDATED_BY, $this->id);

			if (!isset($this->lastProfileRelatedByUpdatedByCriteria) || !$this->lastProfileRelatedByUpdatedByCriteria->equals($criteria)) {
				$this->collProfilesRelatedByUpdatedBy = ProfilePeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfileRelatedByUpdatedByCriteria = $criteria;

		return $this->collProfilesRelatedByUpdatedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilesRelatedByUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilesRelatedByUpdatedByJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collProfilesRelatedByUpdatedBy = array();
			} else {

				$criteria->add(ProfilePeer::UPDATED_BY, $this->id);

				$this->collProfilesRelatedByUpdatedBy = ProfilePeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePeer::UPDATED_BY, $this->id);

			if (!isset($this->lastProfileRelatedByUpdatedByCriteria) || !$this->lastProfileRelatedByUpdatedByCriteria->equals($criteria)) {
				$this->collProfilesRelatedByUpdatedBy = ProfilePeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfileRelatedByUpdatedByCriteria = $criteria;

		return $this->collProfilesRelatedByUpdatedBy;
	}

	/**
	 * Clears out the collProfilesRelatedByDeletedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProfilesRelatedByDeletedBy()
	 */
	public function clearProfilesRelatedByDeletedBy()
	{
		$this->collProfilesRelatedByDeletedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProfilesRelatedByDeletedBy collection (array).
	 *
	 * By default this just sets the collProfilesRelatedByDeletedBy collection to an empty array (like clearcollProfilesRelatedByDeletedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProfilesRelatedByDeletedBy()
	{
		$this->collProfilesRelatedByDeletedBy = array();
	}

	/**
	 * Gets an array of Profile objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related ProfilesRelatedByDeletedBy from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Profile[]
	 * @throws     PropelException
	 */
	public function getProfilesRelatedByDeletedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesRelatedByDeletedBy === null) {
			if ($this->isNew()) {
			   $this->collProfilesRelatedByDeletedBy = array();
			} else {

				$criteria->add(ProfilePeer::DELETED_BY, $this->id);

				ProfilePeer::addSelectColumns($criteria);
				$this->collProfilesRelatedByDeletedBy = ProfilePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProfilePeer::DELETED_BY, $this->id);

				ProfilePeer::addSelectColumns($criteria);
				if (!isset($this->lastProfileRelatedByDeletedByCriteria) || !$this->lastProfileRelatedByDeletedByCriteria->equals($criteria)) {
					$this->collProfilesRelatedByDeletedBy = ProfilePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProfileRelatedByDeletedByCriteria = $criteria;
		return $this->collProfilesRelatedByDeletedBy;
	}

	/**
	 * Returns the number of related Profile objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Profile objects.
	 * @throws     PropelException
	 */
	public function countProfilesRelatedByDeletedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProfilesRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProfilePeer::DELETED_BY, $this->id);

				$count = ProfilePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProfilePeer::DELETED_BY, $this->id);

				if (!isset($this->lastProfileRelatedByDeletedByCriteria) || !$this->lastProfileRelatedByDeletedByCriteria->equals($criteria)) {
					$count = ProfilePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collProfilesRelatedByDeletedBy);
				}
			} else {
				$count = count($this->collProfilesRelatedByDeletedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Profile object to this object
	 * through the Profile foreign key attribute.
	 *
	 * @param      Profile $l Profile
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProfileRelatedByDeletedBy(Profile $l)
	{
		if ($this->collProfilesRelatedByDeletedBy === null) {
			$this->initProfilesRelatedByDeletedBy();
		}
		if (!in_array($l, $this->collProfilesRelatedByDeletedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProfilesRelatedByDeletedBy, $l);
			$l->setUserRelatedByDeletedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilesRelatedByDeletedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilesRelatedByDeletedByJoinAgent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$this->collProfilesRelatedByDeletedBy = array();
			} else {

				$criteria->add(ProfilePeer::DELETED_BY, $this->id);

				$this->collProfilesRelatedByDeletedBy = ProfilePeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePeer::DELETED_BY, $this->id);

			if (!isset($this->lastProfileRelatedByDeletedByCriteria) || !$this->lastProfileRelatedByDeletedByCriteria->equals($criteria)) {
				$this->collProfilesRelatedByDeletedBy = ProfilePeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfileRelatedByDeletedByCriteria = $criteria;

		return $this->collProfilesRelatedByDeletedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilesRelatedByDeletedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilesRelatedByDeletedByJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$this->collProfilesRelatedByDeletedBy = array();
			} else {

				$criteria->add(ProfilePeer::DELETED_BY, $this->id);

				$this->collProfilesRelatedByDeletedBy = ProfilePeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePeer::DELETED_BY, $this->id);

			if (!isset($this->lastProfileRelatedByDeletedByCriteria) || !$this->lastProfileRelatedByDeletedByCriteria->equals($criteria)) {
				$this->collProfilesRelatedByDeletedBy = ProfilePeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfileRelatedByDeletedByCriteria = $criteria;

		return $this->collProfilesRelatedByDeletedBy;
	}

	/**
	 * Clears out the collProfilesRelatedByChildUpdatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProfilesRelatedByChildUpdatedBy()
	 */
	public function clearProfilesRelatedByChildUpdatedBy()
	{
		$this->collProfilesRelatedByChildUpdatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProfilesRelatedByChildUpdatedBy collection (array).
	 *
	 * By default this just sets the collProfilesRelatedByChildUpdatedBy collection to an empty array (like clearcollProfilesRelatedByChildUpdatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProfilesRelatedByChildUpdatedBy()
	{
		$this->collProfilesRelatedByChildUpdatedBy = array();
	}

	/**
	 * Gets an array of Profile objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related ProfilesRelatedByChildUpdatedBy from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Profile[]
	 * @throws     PropelException
	 */
	public function getProfilesRelatedByChildUpdatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesRelatedByChildUpdatedBy === null) {
			if ($this->isNew()) {
			   $this->collProfilesRelatedByChildUpdatedBy = array();
			} else {

				$criteria->add(ProfilePeer::CHILD_UPDATED_BY, $this->id);

				ProfilePeer::addSelectColumns($criteria);
				$this->collProfilesRelatedByChildUpdatedBy = ProfilePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProfilePeer::CHILD_UPDATED_BY, $this->id);

				ProfilePeer::addSelectColumns($criteria);
				if (!isset($this->lastProfileRelatedByChildUpdatedByCriteria) || !$this->lastProfileRelatedByChildUpdatedByCriteria->equals($criteria)) {
					$this->collProfilesRelatedByChildUpdatedBy = ProfilePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProfileRelatedByChildUpdatedByCriteria = $criteria;
		return $this->collProfilesRelatedByChildUpdatedBy;
	}

	/**
	 * Returns the number of related Profile objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Profile objects.
	 * @throws     PropelException
	 */
	public function countProfilesRelatedByChildUpdatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProfilesRelatedByChildUpdatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProfilePeer::CHILD_UPDATED_BY, $this->id);

				$count = ProfilePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProfilePeer::CHILD_UPDATED_BY, $this->id);

				if (!isset($this->lastProfileRelatedByChildUpdatedByCriteria) || !$this->lastProfileRelatedByChildUpdatedByCriteria->equals($criteria)) {
					$count = ProfilePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collProfilesRelatedByChildUpdatedBy);
				}
			} else {
				$count = count($this->collProfilesRelatedByChildUpdatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Profile object to this object
	 * through the Profile foreign key attribute.
	 *
	 * @param      Profile $l Profile
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProfileRelatedByChildUpdatedBy(Profile $l)
	{
		if ($this->collProfilesRelatedByChildUpdatedBy === null) {
			$this->initProfilesRelatedByChildUpdatedBy();
		}
		if (!in_array($l, $this->collProfilesRelatedByChildUpdatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProfilesRelatedByChildUpdatedBy, $l);
			$l->setUserRelatedByChildUpdatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilesRelatedByChildUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilesRelatedByChildUpdatedByJoinAgent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesRelatedByChildUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collProfilesRelatedByChildUpdatedBy = array();
			} else {

				$criteria->add(ProfilePeer::CHILD_UPDATED_BY, $this->id);

				$this->collProfilesRelatedByChildUpdatedBy = ProfilePeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePeer::CHILD_UPDATED_BY, $this->id);

			if (!isset($this->lastProfileRelatedByChildUpdatedByCriteria) || !$this->lastProfileRelatedByChildUpdatedByCriteria->equals($criteria)) {
				$this->collProfilesRelatedByChildUpdatedBy = ProfilePeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfileRelatedByChildUpdatedByCriteria = $criteria;

		return $this->collProfilesRelatedByChildUpdatedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilesRelatedByChildUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilesRelatedByChildUpdatedByJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilesRelatedByChildUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collProfilesRelatedByChildUpdatedBy = array();
			} else {

				$criteria->add(ProfilePeer::CHILD_UPDATED_BY, $this->id);

				$this->collProfilesRelatedByChildUpdatedBy = ProfilePeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePeer::CHILD_UPDATED_BY, $this->id);

			if (!isset($this->lastProfileRelatedByChildUpdatedByCriteria) || !$this->lastProfileRelatedByChildUpdatedByCriteria->equals($criteria)) {
				$this->collProfilesRelatedByChildUpdatedBy = ProfilePeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfileRelatedByChildUpdatedByCriteria = $criteria;

		return $this->collProfilesRelatedByChildUpdatedBy;
	}

	/**
	 * Clears out the collProfilePropertysRelatedByCreatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProfilePropertysRelatedByCreatedBy()
	 */
	public function clearProfilePropertysRelatedByCreatedBy()
	{
		$this->collProfilePropertysRelatedByCreatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProfilePropertysRelatedByCreatedBy collection (array).
	 *
	 * By default this just sets the collProfilePropertysRelatedByCreatedBy collection to an empty array (like clearcollProfilePropertysRelatedByCreatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProfilePropertysRelatedByCreatedBy()
	{
		$this->collProfilePropertysRelatedByCreatedBy = array();
	}

	/**
	 * Gets an array of ProfileProperty objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related ProfilePropertysRelatedByCreatedBy from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ProfileProperty[]
	 * @throws     PropelException
	 */
	public function getProfilePropertysRelatedByCreatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByCreatedBy === null) {
			if ($this->isNew()) {
			   $this->collProfilePropertysRelatedByCreatedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::CREATED_BY, $this->id);

				ProfilePropertyPeer::addSelectColumns($criteria);
				$this->collProfilePropertysRelatedByCreatedBy = ProfilePropertyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProfilePropertyPeer::CREATED_BY, $this->id);

				ProfilePropertyPeer::addSelectColumns($criteria);
				if (!isset($this->lastProfilePropertyRelatedByCreatedByCriteria) || !$this->lastProfilePropertyRelatedByCreatedByCriteria->equals($criteria)) {
					$this->collProfilePropertysRelatedByCreatedBy = ProfilePropertyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProfilePropertyRelatedByCreatedByCriteria = $criteria;
		return $this->collProfilePropertysRelatedByCreatedBy;
	}

	/**
	 * Returns the number of related ProfileProperty objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ProfileProperty objects.
	 * @throws     PropelException
	 */
	public function countProfilePropertysRelatedByCreatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProfilePropertysRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProfilePropertyPeer::CREATED_BY, $this->id);

				$count = ProfilePropertyPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProfilePropertyPeer::CREATED_BY, $this->id);

				if (!isset($this->lastProfilePropertyRelatedByCreatedByCriteria) || !$this->lastProfilePropertyRelatedByCreatedByCriteria->equals($criteria)) {
					$count = ProfilePropertyPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collProfilePropertysRelatedByCreatedBy);
				}
			} else {
				$count = count($this->collProfilePropertysRelatedByCreatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ProfileProperty object to this object
	 * through the ProfileProperty foreign key attribute.
	 *
	 * @param      ProfileProperty $l ProfileProperty
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProfilePropertyRelatedByCreatedBy(ProfileProperty $l)
	{
		if ($this->collProfilePropertysRelatedByCreatedBy === null) {
			$this->initProfilePropertysRelatedByCreatedBy();
		}
		if (!in_array($l, $this->collProfilePropertysRelatedByCreatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProfilePropertysRelatedByCreatedBy, $l);
			$l->setUserRelatedByCreatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilePropertysRelatedByCreatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilePropertysRelatedByCreatedByJoinProfile($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$this->collProfilePropertysRelatedByCreatedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::CREATED_BY, $this->id);

				$this->collProfilePropertysRelatedByCreatedBy = ProfilePropertyPeer::doSelectJoinProfile($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePropertyPeer::CREATED_BY, $this->id);

			if (!isset($this->lastProfilePropertyRelatedByCreatedByCriteria) || !$this->lastProfilePropertyRelatedByCreatedByCriteria->equals($criteria)) {
				$this->collProfilePropertysRelatedByCreatedBy = ProfilePropertyPeer::doSelectJoinProfile($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilePropertyRelatedByCreatedByCriteria = $criteria;

		return $this->collProfilePropertysRelatedByCreatedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilePropertysRelatedByCreatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilePropertysRelatedByCreatedByJoinSchema($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$this->collProfilePropertysRelatedByCreatedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::CREATED_BY, $this->id);

				$this->collProfilePropertysRelatedByCreatedBy = ProfilePropertyPeer::doSelectJoinSchema($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePropertyPeer::CREATED_BY, $this->id);

			if (!isset($this->lastProfilePropertyRelatedByCreatedByCriteria) || !$this->lastProfilePropertyRelatedByCreatedByCriteria->equals($criteria)) {
				$this->collProfilePropertysRelatedByCreatedBy = ProfilePropertyPeer::doSelectJoinSchema($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilePropertyRelatedByCreatedByCriteria = $criteria;

		return $this->collProfilePropertysRelatedByCreatedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilePropertysRelatedByCreatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilePropertysRelatedByCreatedByJoinSchemaProperty($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$this->collProfilePropertysRelatedByCreatedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::CREATED_BY, $this->id);

				$this->collProfilePropertysRelatedByCreatedBy = ProfilePropertyPeer::doSelectJoinSchemaProperty($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePropertyPeer::CREATED_BY, $this->id);

			if (!isset($this->lastProfilePropertyRelatedByCreatedByCriteria) || !$this->lastProfilePropertyRelatedByCreatedByCriteria->equals($criteria)) {
				$this->collProfilePropertysRelatedByCreatedBy = ProfilePropertyPeer::doSelectJoinSchemaProperty($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilePropertyRelatedByCreatedByCriteria = $criteria;

		return $this->collProfilePropertysRelatedByCreatedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilePropertysRelatedByCreatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilePropertysRelatedByCreatedByJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$this->collProfilePropertysRelatedByCreatedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::CREATED_BY, $this->id);

				$this->collProfilePropertysRelatedByCreatedBy = ProfilePropertyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePropertyPeer::CREATED_BY, $this->id);

			if (!isset($this->lastProfilePropertyRelatedByCreatedByCriteria) || !$this->lastProfilePropertyRelatedByCreatedByCriteria->equals($criteria)) {
				$this->collProfilePropertysRelatedByCreatedBy = ProfilePropertyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilePropertyRelatedByCreatedByCriteria = $criteria;

		return $this->collProfilePropertysRelatedByCreatedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilePropertysRelatedByCreatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilePropertysRelatedByCreatedByJoinProfilePropertyRelatedByInverseProfilePropertyId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByCreatedBy === null) {
			if ($this->isNew()) {
				$this->collProfilePropertysRelatedByCreatedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::CREATED_BY, $this->id);

				$this->collProfilePropertysRelatedByCreatedBy = ProfilePropertyPeer::doSelectJoinProfilePropertyRelatedByInverseProfilePropertyId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePropertyPeer::CREATED_BY, $this->id);

			if (!isset($this->lastProfilePropertyRelatedByCreatedByCriteria) || !$this->lastProfilePropertyRelatedByCreatedByCriteria->equals($criteria)) {
				$this->collProfilePropertysRelatedByCreatedBy = ProfilePropertyPeer::doSelectJoinProfilePropertyRelatedByInverseProfilePropertyId($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilePropertyRelatedByCreatedByCriteria = $criteria;

		return $this->collProfilePropertysRelatedByCreatedBy;
	}

	/**
	 * Clears out the collProfilePropertysRelatedByUpdatedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProfilePropertysRelatedByUpdatedBy()
	 */
	public function clearProfilePropertysRelatedByUpdatedBy()
	{
		$this->collProfilePropertysRelatedByUpdatedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProfilePropertysRelatedByUpdatedBy collection (array).
	 *
	 * By default this just sets the collProfilePropertysRelatedByUpdatedBy collection to an empty array (like clearcollProfilePropertysRelatedByUpdatedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProfilePropertysRelatedByUpdatedBy()
	{
		$this->collProfilePropertysRelatedByUpdatedBy = array();
	}

	/**
	 * Gets an array of ProfileProperty objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related ProfilePropertysRelatedByUpdatedBy from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ProfileProperty[]
	 * @throws     PropelException
	 */
	public function getProfilePropertysRelatedByUpdatedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
			   $this->collProfilePropertysRelatedByUpdatedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::UPDATED_BY, $this->id);

				ProfilePropertyPeer::addSelectColumns($criteria);
				$this->collProfilePropertysRelatedByUpdatedBy = ProfilePropertyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProfilePropertyPeer::UPDATED_BY, $this->id);

				ProfilePropertyPeer::addSelectColumns($criteria);
				if (!isset($this->lastProfilePropertyRelatedByUpdatedByCriteria) || !$this->lastProfilePropertyRelatedByUpdatedByCriteria->equals($criteria)) {
					$this->collProfilePropertysRelatedByUpdatedBy = ProfilePropertyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProfilePropertyRelatedByUpdatedByCriteria = $criteria;
		return $this->collProfilePropertysRelatedByUpdatedBy;
	}

	/**
	 * Returns the number of related ProfileProperty objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ProfileProperty objects.
	 * @throws     PropelException
	 */
	public function countProfilePropertysRelatedByUpdatedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProfilePropertysRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProfilePropertyPeer::UPDATED_BY, $this->id);

				$count = ProfilePropertyPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProfilePropertyPeer::UPDATED_BY, $this->id);

				if (!isset($this->lastProfilePropertyRelatedByUpdatedByCriteria) || !$this->lastProfilePropertyRelatedByUpdatedByCriteria->equals($criteria)) {
					$count = ProfilePropertyPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collProfilePropertysRelatedByUpdatedBy);
				}
			} else {
				$count = count($this->collProfilePropertysRelatedByUpdatedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ProfileProperty object to this object
	 * through the ProfileProperty foreign key attribute.
	 *
	 * @param      ProfileProperty $l ProfileProperty
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProfilePropertyRelatedByUpdatedBy(ProfileProperty $l)
	{
		if ($this->collProfilePropertysRelatedByUpdatedBy === null) {
			$this->initProfilePropertysRelatedByUpdatedBy();
		}
		if (!in_array($l, $this->collProfilePropertysRelatedByUpdatedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProfilePropertysRelatedByUpdatedBy, $l);
			$l->setUserRelatedByUpdatedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilePropertysRelatedByUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilePropertysRelatedByUpdatedByJoinProfile($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collProfilePropertysRelatedByUpdatedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::UPDATED_BY, $this->id);

				$this->collProfilePropertysRelatedByUpdatedBy = ProfilePropertyPeer::doSelectJoinProfile($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePropertyPeer::UPDATED_BY, $this->id);

			if (!isset($this->lastProfilePropertyRelatedByUpdatedByCriteria) || !$this->lastProfilePropertyRelatedByUpdatedByCriteria->equals($criteria)) {
				$this->collProfilePropertysRelatedByUpdatedBy = ProfilePropertyPeer::doSelectJoinProfile($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilePropertyRelatedByUpdatedByCriteria = $criteria;

		return $this->collProfilePropertysRelatedByUpdatedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilePropertysRelatedByUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilePropertysRelatedByUpdatedByJoinSchema($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collProfilePropertysRelatedByUpdatedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::UPDATED_BY, $this->id);

				$this->collProfilePropertysRelatedByUpdatedBy = ProfilePropertyPeer::doSelectJoinSchema($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePropertyPeer::UPDATED_BY, $this->id);

			if (!isset($this->lastProfilePropertyRelatedByUpdatedByCriteria) || !$this->lastProfilePropertyRelatedByUpdatedByCriteria->equals($criteria)) {
				$this->collProfilePropertysRelatedByUpdatedBy = ProfilePropertyPeer::doSelectJoinSchema($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilePropertyRelatedByUpdatedByCriteria = $criteria;

		return $this->collProfilePropertysRelatedByUpdatedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilePropertysRelatedByUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilePropertysRelatedByUpdatedByJoinSchemaProperty($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collProfilePropertysRelatedByUpdatedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::UPDATED_BY, $this->id);

				$this->collProfilePropertysRelatedByUpdatedBy = ProfilePropertyPeer::doSelectJoinSchemaProperty($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePropertyPeer::UPDATED_BY, $this->id);

			if (!isset($this->lastProfilePropertyRelatedByUpdatedByCriteria) || !$this->lastProfilePropertyRelatedByUpdatedByCriteria->equals($criteria)) {
				$this->collProfilePropertysRelatedByUpdatedBy = ProfilePropertyPeer::doSelectJoinSchemaProperty($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilePropertyRelatedByUpdatedByCriteria = $criteria;

		return $this->collProfilePropertysRelatedByUpdatedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilePropertysRelatedByUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilePropertysRelatedByUpdatedByJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collProfilePropertysRelatedByUpdatedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::UPDATED_BY, $this->id);

				$this->collProfilePropertysRelatedByUpdatedBy = ProfilePropertyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePropertyPeer::UPDATED_BY, $this->id);

			if (!isset($this->lastProfilePropertyRelatedByUpdatedByCriteria) || !$this->lastProfilePropertyRelatedByUpdatedByCriteria->equals($criteria)) {
				$this->collProfilePropertysRelatedByUpdatedBy = ProfilePropertyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilePropertyRelatedByUpdatedByCriteria = $criteria;

		return $this->collProfilePropertysRelatedByUpdatedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilePropertysRelatedByUpdatedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilePropertysRelatedByUpdatedByJoinProfilePropertyRelatedByInverseProfilePropertyId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByUpdatedBy === null) {
			if ($this->isNew()) {
				$this->collProfilePropertysRelatedByUpdatedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::UPDATED_BY, $this->id);

				$this->collProfilePropertysRelatedByUpdatedBy = ProfilePropertyPeer::doSelectJoinProfilePropertyRelatedByInverseProfilePropertyId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePropertyPeer::UPDATED_BY, $this->id);

			if (!isset($this->lastProfilePropertyRelatedByUpdatedByCriteria) || !$this->lastProfilePropertyRelatedByUpdatedByCriteria->equals($criteria)) {
				$this->collProfilePropertysRelatedByUpdatedBy = ProfilePropertyPeer::doSelectJoinProfilePropertyRelatedByInverseProfilePropertyId($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilePropertyRelatedByUpdatedByCriteria = $criteria;

		return $this->collProfilePropertysRelatedByUpdatedBy;
	}

	/**
	 * Clears out the collProfilePropertysRelatedByDeletedBy collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProfilePropertysRelatedByDeletedBy()
	 */
	public function clearProfilePropertysRelatedByDeletedBy()
	{
		$this->collProfilePropertysRelatedByDeletedBy = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProfilePropertysRelatedByDeletedBy collection (array).
	 *
	 * By default this just sets the collProfilePropertysRelatedByDeletedBy collection to an empty array (like clearcollProfilePropertysRelatedByDeletedBy());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProfilePropertysRelatedByDeletedBy()
	{
		$this->collProfilePropertysRelatedByDeletedBy = array();
	}

	/**
	 * Gets an array of ProfileProperty objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related ProfilePropertysRelatedByDeletedBy from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ProfileProperty[]
	 * @throws     PropelException
	 */
	public function getProfilePropertysRelatedByDeletedBy($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByDeletedBy === null) {
			if ($this->isNew()) {
			   $this->collProfilePropertysRelatedByDeletedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::DELETED_BY, $this->id);

				ProfilePropertyPeer::addSelectColumns($criteria);
				$this->collProfilePropertysRelatedByDeletedBy = ProfilePropertyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProfilePropertyPeer::DELETED_BY, $this->id);

				ProfilePropertyPeer::addSelectColumns($criteria);
				if (!isset($this->lastProfilePropertyRelatedByDeletedByCriteria) || !$this->lastProfilePropertyRelatedByDeletedByCriteria->equals($criteria)) {
					$this->collProfilePropertysRelatedByDeletedBy = ProfilePropertyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProfilePropertyRelatedByDeletedByCriteria = $criteria;
		return $this->collProfilePropertysRelatedByDeletedBy;
	}

	/**
	 * Returns the number of related ProfileProperty objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ProfileProperty objects.
	 * @throws     PropelException
	 */
	public function countProfilePropertysRelatedByDeletedBy(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProfilePropertysRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProfilePropertyPeer::DELETED_BY, $this->id);

				$count = ProfilePropertyPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProfilePropertyPeer::DELETED_BY, $this->id);

				if (!isset($this->lastProfilePropertyRelatedByDeletedByCriteria) || !$this->lastProfilePropertyRelatedByDeletedByCriteria->equals($criteria)) {
					$count = ProfilePropertyPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collProfilePropertysRelatedByDeletedBy);
				}
			} else {
				$count = count($this->collProfilePropertysRelatedByDeletedBy);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ProfileProperty object to this object
	 * through the ProfileProperty foreign key attribute.
	 *
	 * @param      ProfileProperty $l ProfileProperty
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProfilePropertyRelatedByDeletedBy(ProfileProperty $l)
	{
		if ($this->collProfilePropertysRelatedByDeletedBy === null) {
			$this->initProfilePropertysRelatedByDeletedBy();
		}
		if (!in_array($l, $this->collProfilePropertysRelatedByDeletedBy, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProfilePropertysRelatedByDeletedBy, $l);
			$l->setUserRelatedByDeletedBy($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilePropertysRelatedByDeletedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilePropertysRelatedByDeletedByJoinProfile($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$this->collProfilePropertysRelatedByDeletedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::DELETED_BY, $this->id);

				$this->collProfilePropertysRelatedByDeletedBy = ProfilePropertyPeer::doSelectJoinProfile($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePropertyPeer::DELETED_BY, $this->id);

			if (!isset($this->lastProfilePropertyRelatedByDeletedByCriteria) || !$this->lastProfilePropertyRelatedByDeletedByCriteria->equals($criteria)) {
				$this->collProfilePropertysRelatedByDeletedBy = ProfilePropertyPeer::doSelectJoinProfile($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilePropertyRelatedByDeletedByCriteria = $criteria;

		return $this->collProfilePropertysRelatedByDeletedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilePropertysRelatedByDeletedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilePropertysRelatedByDeletedByJoinSchema($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$this->collProfilePropertysRelatedByDeletedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::DELETED_BY, $this->id);

				$this->collProfilePropertysRelatedByDeletedBy = ProfilePropertyPeer::doSelectJoinSchema($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePropertyPeer::DELETED_BY, $this->id);

			if (!isset($this->lastProfilePropertyRelatedByDeletedByCriteria) || !$this->lastProfilePropertyRelatedByDeletedByCriteria->equals($criteria)) {
				$this->collProfilePropertysRelatedByDeletedBy = ProfilePropertyPeer::doSelectJoinSchema($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilePropertyRelatedByDeletedByCriteria = $criteria;

		return $this->collProfilePropertysRelatedByDeletedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilePropertysRelatedByDeletedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilePropertysRelatedByDeletedByJoinSchemaProperty($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$this->collProfilePropertysRelatedByDeletedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::DELETED_BY, $this->id);

				$this->collProfilePropertysRelatedByDeletedBy = ProfilePropertyPeer::doSelectJoinSchemaProperty($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePropertyPeer::DELETED_BY, $this->id);

			if (!isset($this->lastProfilePropertyRelatedByDeletedByCriteria) || !$this->lastProfilePropertyRelatedByDeletedByCriteria->equals($criteria)) {
				$this->collProfilePropertysRelatedByDeletedBy = ProfilePropertyPeer::doSelectJoinSchemaProperty($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilePropertyRelatedByDeletedByCriteria = $criteria;

		return $this->collProfilePropertysRelatedByDeletedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilePropertysRelatedByDeletedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilePropertysRelatedByDeletedByJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$this->collProfilePropertysRelatedByDeletedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::DELETED_BY, $this->id);

				$this->collProfilePropertysRelatedByDeletedBy = ProfilePropertyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePropertyPeer::DELETED_BY, $this->id);

			if (!isset($this->lastProfilePropertyRelatedByDeletedByCriteria) || !$this->lastProfilePropertyRelatedByDeletedByCriteria->equals($criteria)) {
				$this->collProfilePropertysRelatedByDeletedBy = ProfilePropertyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilePropertyRelatedByDeletedByCriteria = $criteria;

		return $this->collProfilePropertysRelatedByDeletedBy;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ProfilePropertysRelatedByDeletedBy from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getProfilePropertysRelatedByDeletedByJoinProfilePropertyRelatedByInverseProfilePropertyId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePropertysRelatedByDeletedBy === null) {
			if ($this->isNew()) {
				$this->collProfilePropertysRelatedByDeletedBy = array();
			} else {

				$criteria->add(ProfilePropertyPeer::DELETED_BY, $this->id);

				$this->collProfilePropertysRelatedByDeletedBy = ProfilePropertyPeer::doSelectJoinProfilePropertyRelatedByInverseProfilePropertyId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePropertyPeer::DELETED_BY, $this->id);

			if (!isset($this->lastProfilePropertyRelatedByDeletedByCriteria) || !$this->lastProfilePropertyRelatedByDeletedByCriteria->equals($criteria)) {
				$this->collProfilePropertysRelatedByDeletedBy = ProfilePropertyPeer::doSelectJoinProfilePropertyRelatedByInverseProfilePropertyId($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilePropertyRelatedByDeletedByCriteria = $criteria;

		return $this->collProfilePropertysRelatedByDeletedBy;
	}

	/**
	 * Clears out the collAgentHasUsers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAgentHasUsers()
	 */
	public function clearAgentHasUsers()
	{
		$this->collAgentHasUsers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAgentHasUsers collection (array).
	 *
	 * By default this just sets the collAgentHasUsers collection to an empty array (like clearcollAgentHasUsers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAgentHasUsers()
	{
		$this->collAgentHasUsers = array();
	}

	/**
	 * Gets an array of AgentHasUser objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related AgentHasUsers from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AgentHasUser[]
	 * @throws     PropelException
	 */
	public function getAgentHasUsers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentHasUsers === null) {
			if ($this->isNew()) {
			   $this->collAgentHasUsers = array();
			} else {

				$criteria->add(AgentHasUserPeer::USER_ID, $this->id);

				AgentHasUserPeer::addSelectColumns($criteria);
				$this->collAgentHasUsers = AgentHasUserPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AgentHasUserPeer::USER_ID, $this->id);

				AgentHasUserPeer::addSelectColumns($criteria);
				if (!isset($this->lastAgentHasUserCriteria) || !$this->lastAgentHasUserCriteria->equals($criteria)) {
					$this->collAgentHasUsers = AgentHasUserPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAgentHasUserCriteria = $criteria;
		return $this->collAgentHasUsers;
	}

	/**
	 * Returns the number of related AgentHasUser objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AgentHasUser objects.
	 * @throws     PropelException
	 */
	public function countAgentHasUsers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAgentHasUsers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AgentHasUserPeer::USER_ID, $this->id);

				$count = AgentHasUserPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AgentHasUserPeer::USER_ID, $this->id);

				if (!isset($this->lastAgentHasUserCriteria) || !$this->lastAgentHasUserCriteria->equals($criteria)) {
					$count = AgentHasUserPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAgentHasUsers);
				}
			} else {
				$count = count($this->collAgentHasUsers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AgentHasUser object to this object
	 * through the AgentHasUser foreign key attribute.
	 *
	 * @param      AgentHasUser $l AgentHasUser
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAgentHasUser(AgentHasUser $l)
	{
		if ($this->collAgentHasUsers === null) {
			$this->initAgentHasUsers();
		}
		if (!in_array($l, $this->collAgentHasUsers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAgentHasUsers, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related AgentHasUsers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getAgentHasUsersJoinAgent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentHasUsers === null) {
			if ($this->isNew()) {
				$this->collAgentHasUsers = array();
			} else {

				$criteria->add(AgentHasUserPeer::USER_ID, $this->id);

				$this->collAgentHasUsers = AgentHasUserPeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AgentHasUserPeer::USER_ID, $this->id);

			if (!isset($this->lastAgentHasUserCriteria) || !$this->lastAgentHasUserCriteria->equals($criteria)) {
				$this->collAgentHasUsers = AgentHasUserPeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		}
		$this->lastAgentHasUserCriteria = $criteria;

		return $this->collAgentHasUsers;
	}

	/**
	 * Clears out the collConceptsRelatedByCreatedUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addConceptsRelatedByCreatedUserId()
	 */
	public function clearConceptsRelatedByCreatedUserId()
	{
		$this->collConceptsRelatedByCreatedUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collConceptsRelatedByCreatedUserId collection (array).
	 *
	 * By default this just sets the collConceptsRelatedByCreatedUserId collection to an empty array (like clearcollConceptsRelatedByCreatedUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initConceptsRelatedByCreatedUserId()
	{
		$this->collConceptsRelatedByCreatedUserId = array();
	}

	/**
	 * Gets an array of Concept objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related ConceptsRelatedByCreatedUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Concept[]
	 * @throws     PropelException
	 */
	public function getConceptsRelatedByCreatedUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptsRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
			   $this->collConceptsRelatedByCreatedUserId = array();
			} else {

				$criteria->add(ConceptPeer::CREATED_USER_ID, $this->id);

				ConceptPeer::addSelectColumns($criteria);
				$this->collConceptsRelatedByCreatedUserId = ConceptPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ConceptPeer::CREATED_USER_ID, $this->id);

				ConceptPeer::addSelectColumns($criteria);
				if (!isset($this->lastConceptRelatedByCreatedUserIdCriteria) || !$this->lastConceptRelatedByCreatedUserIdCriteria->equals($criteria)) {
					$this->collConceptsRelatedByCreatedUserId = ConceptPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastConceptRelatedByCreatedUserIdCriteria = $criteria;
		return $this->collConceptsRelatedByCreatedUserId;
	}

	/**
	 * Returns the number of related Concept objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Concept objects.
	 * @throws     PropelException
	 */
	public function countConceptsRelatedByCreatedUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collConceptsRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ConceptPeer::CREATED_USER_ID, $this->id);

				$count = ConceptPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ConceptPeer::CREATED_USER_ID, $this->id);

				if (!isset($this->lastConceptRelatedByCreatedUserIdCriteria) || !$this->lastConceptRelatedByCreatedUserIdCriteria->equals($criteria)) {
					$count = ConceptPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collConceptsRelatedByCreatedUserId);
				}
			} else {
				$count = count($this->collConceptsRelatedByCreatedUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Concept object to this object
	 * through the Concept foreign key attribute.
	 *
	 * @param      Concept $l Concept
	 * @return     void
	 * @throws     PropelException
	 */
	public function addConceptRelatedByCreatedUserId(Concept $l)
	{
		if ($this->collConceptsRelatedByCreatedUserId === null) {
			$this->initConceptsRelatedByCreatedUserId();
		}
		if (!in_array($l, $this->collConceptsRelatedByCreatedUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collConceptsRelatedByCreatedUserId, $l);
			$l->setUserRelatedByCreatedUserId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptsRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptsRelatedByCreatedUserIdJoinVocabulary($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptsRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collConceptsRelatedByCreatedUserId = array();
			} else {

				$criteria->add(ConceptPeer::CREATED_USER_ID, $this->id);

				$this->collConceptsRelatedByCreatedUserId = ConceptPeer::doSelectJoinVocabulary($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastConceptRelatedByCreatedUserIdCriteria) || !$this->lastConceptRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collConceptsRelatedByCreatedUserId = ConceptPeer::doSelectJoinVocabulary($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collConceptsRelatedByCreatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptsRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptsRelatedByCreatedUserIdJoinConceptProperty($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptsRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collConceptsRelatedByCreatedUserId = array();
			} else {

				$criteria->add(ConceptPeer::CREATED_USER_ID, $this->id);

				$this->collConceptsRelatedByCreatedUserId = ConceptPeer::doSelectJoinConceptProperty($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastConceptRelatedByCreatedUserIdCriteria) || !$this->lastConceptRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collConceptsRelatedByCreatedUserId = ConceptPeer::doSelectJoinConceptProperty($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collConceptsRelatedByCreatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptsRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptsRelatedByCreatedUserIdJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptsRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collConceptsRelatedByCreatedUserId = array();
			} else {

				$criteria->add(ConceptPeer::CREATED_USER_ID, $this->id);

				$this->collConceptsRelatedByCreatedUserId = ConceptPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastConceptRelatedByCreatedUserIdCriteria) || !$this->lastConceptRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collConceptsRelatedByCreatedUserId = ConceptPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collConceptsRelatedByCreatedUserId;
	}

	/**
	 * Clears out the collConceptsRelatedByUpdatedUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addConceptsRelatedByUpdatedUserId()
	 */
	public function clearConceptsRelatedByUpdatedUserId()
	{
		$this->collConceptsRelatedByUpdatedUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collConceptsRelatedByUpdatedUserId collection (array).
	 *
	 * By default this just sets the collConceptsRelatedByUpdatedUserId collection to an empty array (like clearcollConceptsRelatedByUpdatedUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initConceptsRelatedByUpdatedUserId()
	{
		$this->collConceptsRelatedByUpdatedUserId = array();
	}

	/**
	 * Gets an array of Concept objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related ConceptsRelatedByUpdatedUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Concept[]
	 * @throws     PropelException
	 */
	public function getConceptsRelatedByUpdatedUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptsRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
			   $this->collConceptsRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(ConceptPeer::UPDATED_USER_ID, $this->id);

				ConceptPeer::addSelectColumns($criteria);
				$this->collConceptsRelatedByUpdatedUserId = ConceptPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ConceptPeer::UPDATED_USER_ID, $this->id);

				ConceptPeer::addSelectColumns($criteria);
				if (!isset($this->lastConceptRelatedByUpdatedUserIdCriteria) || !$this->lastConceptRelatedByUpdatedUserIdCriteria->equals($criteria)) {
					$this->collConceptsRelatedByUpdatedUserId = ConceptPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastConceptRelatedByUpdatedUserIdCriteria = $criteria;
		return $this->collConceptsRelatedByUpdatedUserId;
	}

	/**
	 * Returns the number of related Concept objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Concept objects.
	 * @throws     PropelException
	 */
	public function countConceptsRelatedByUpdatedUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collConceptsRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ConceptPeer::UPDATED_USER_ID, $this->id);

				$count = ConceptPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ConceptPeer::UPDATED_USER_ID, $this->id);

				if (!isset($this->lastConceptRelatedByUpdatedUserIdCriteria) || !$this->lastConceptRelatedByUpdatedUserIdCriteria->equals($criteria)) {
					$count = ConceptPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collConceptsRelatedByUpdatedUserId);
				}
			} else {
				$count = count($this->collConceptsRelatedByUpdatedUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Concept object to this object
	 * through the Concept foreign key attribute.
	 *
	 * @param      Concept $l Concept
	 * @return     void
	 * @throws     PropelException
	 */
	public function addConceptRelatedByUpdatedUserId(Concept $l)
	{
		if ($this->collConceptsRelatedByUpdatedUserId === null) {
			$this->initConceptsRelatedByUpdatedUserId();
		}
		if (!in_array($l, $this->collConceptsRelatedByUpdatedUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collConceptsRelatedByUpdatedUserId, $l);
			$l->setUserRelatedByUpdatedUserId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptsRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptsRelatedByUpdatedUserIdJoinVocabulary($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptsRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collConceptsRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(ConceptPeer::UPDATED_USER_ID, $this->id);

				$this->collConceptsRelatedByUpdatedUserId = ConceptPeer::doSelectJoinVocabulary($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastConceptRelatedByUpdatedUserIdCriteria) || !$this->lastConceptRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collConceptsRelatedByUpdatedUserId = ConceptPeer::doSelectJoinVocabulary($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collConceptsRelatedByUpdatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptsRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptsRelatedByUpdatedUserIdJoinConceptProperty($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptsRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collConceptsRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(ConceptPeer::UPDATED_USER_ID, $this->id);

				$this->collConceptsRelatedByUpdatedUserId = ConceptPeer::doSelectJoinConceptProperty($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastConceptRelatedByUpdatedUserIdCriteria) || !$this->lastConceptRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collConceptsRelatedByUpdatedUserId = ConceptPeer::doSelectJoinConceptProperty($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collConceptsRelatedByUpdatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptsRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptsRelatedByUpdatedUserIdJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptsRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collConceptsRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(ConceptPeer::UPDATED_USER_ID, $this->id);

				$this->collConceptsRelatedByUpdatedUserId = ConceptPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastConceptRelatedByUpdatedUserIdCriteria) || !$this->lastConceptRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collConceptsRelatedByUpdatedUserId = ConceptPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collConceptsRelatedByUpdatedUserId;
	}

	/**
	 * Clears out the collConceptPropertysRelatedByCreatedUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addConceptPropertysRelatedByCreatedUserId()
	 */
	public function clearConceptPropertysRelatedByCreatedUserId()
	{
		$this->collConceptPropertysRelatedByCreatedUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collConceptPropertysRelatedByCreatedUserId collection (array).
	 *
	 * By default this just sets the collConceptPropertysRelatedByCreatedUserId collection to an empty array (like clearcollConceptPropertysRelatedByCreatedUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initConceptPropertysRelatedByCreatedUserId()
	{
		$this->collConceptPropertysRelatedByCreatedUserId = array();
	}

	/**
	 * Gets an array of ConceptProperty objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related ConceptPropertysRelatedByCreatedUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ConceptProperty[]
	 * @throws     PropelException
	 */
	public function getConceptPropertysRelatedByCreatedUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertysRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
			   $this->collConceptPropertysRelatedByCreatedUserId = array();
			} else {

				$criteria->add(ConceptPropertyPeer::CREATED_USER_ID, $this->id);

				ConceptPropertyPeer::addSelectColumns($criteria);
				$this->collConceptPropertysRelatedByCreatedUserId = ConceptPropertyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ConceptPropertyPeer::CREATED_USER_ID, $this->id);

				ConceptPropertyPeer::addSelectColumns($criteria);
				if (!isset($this->lastConceptPropertyRelatedByCreatedUserIdCriteria) || !$this->lastConceptPropertyRelatedByCreatedUserIdCriteria->equals($criteria)) {
					$this->collConceptPropertysRelatedByCreatedUserId = ConceptPropertyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastConceptPropertyRelatedByCreatedUserIdCriteria = $criteria;
		return $this->collConceptPropertysRelatedByCreatedUserId;
	}

	/**
	 * Returns the number of related ConceptProperty objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ConceptProperty objects.
	 * @throws     PropelException
	 */
	public function countConceptPropertysRelatedByCreatedUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collConceptPropertysRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ConceptPropertyPeer::CREATED_USER_ID, $this->id);

				$count = ConceptPropertyPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ConceptPropertyPeer::CREATED_USER_ID, $this->id);

				if (!isset($this->lastConceptPropertyRelatedByCreatedUserIdCriteria) || !$this->lastConceptPropertyRelatedByCreatedUserIdCriteria->equals($criteria)) {
					$count = ConceptPropertyPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collConceptPropertysRelatedByCreatedUserId);
				}
			} else {
				$count = count($this->collConceptPropertysRelatedByCreatedUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ConceptProperty object to this object
	 * through the ConceptProperty foreign key attribute.
	 *
	 * @param      ConceptProperty $l ConceptProperty
	 * @return     void
	 * @throws     PropelException
	 */
	public function addConceptPropertyRelatedByCreatedUserId(ConceptProperty $l)
	{
		if ($this->collConceptPropertysRelatedByCreatedUserId === null) {
			$this->initConceptPropertysRelatedByCreatedUserId();
		}
		if (!in_array($l, $this->collConceptPropertysRelatedByCreatedUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collConceptPropertysRelatedByCreatedUserId, $l);
			$l->setUserRelatedByCreatedUserId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptPropertysRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptPropertysRelatedByCreatedUserIdJoinConceptRelatedByConceptId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertysRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collConceptPropertysRelatedByCreatedUserId = array();
			} else {

				$criteria->add(ConceptPropertyPeer::CREATED_USER_ID, $this->id);

				$this->collConceptPropertysRelatedByCreatedUserId = ConceptPropertyPeer::doSelectJoinConceptRelatedByConceptId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPropertyPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastConceptPropertyRelatedByCreatedUserIdCriteria) || !$this->lastConceptPropertyRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collConceptPropertysRelatedByCreatedUserId = ConceptPropertyPeer::doSelectJoinConceptRelatedByConceptId($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptPropertyRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collConceptPropertysRelatedByCreatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptPropertysRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptPropertysRelatedByCreatedUserIdJoinSkosProperty($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertysRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collConceptPropertysRelatedByCreatedUserId = array();
			} else {

				$criteria->add(ConceptPropertyPeer::CREATED_USER_ID, $this->id);

				$this->collConceptPropertysRelatedByCreatedUserId = ConceptPropertyPeer::doSelectJoinSkosProperty($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPropertyPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastConceptPropertyRelatedByCreatedUserIdCriteria) || !$this->lastConceptPropertyRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collConceptPropertysRelatedByCreatedUserId = ConceptPropertyPeer::doSelectJoinSkosProperty($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptPropertyRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collConceptPropertysRelatedByCreatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptPropertysRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptPropertysRelatedByCreatedUserIdJoinVocabulary($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertysRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collConceptPropertysRelatedByCreatedUserId = array();
			} else {

				$criteria->add(ConceptPropertyPeer::CREATED_USER_ID, $this->id);

				$this->collConceptPropertysRelatedByCreatedUserId = ConceptPropertyPeer::doSelectJoinVocabulary($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPropertyPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastConceptPropertyRelatedByCreatedUserIdCriteria) || !$this->lastConceptPropertyRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collConceptPropertysRelatedByCreatedUserId = ConceptPropertyPeer::doSelectJoinVocabulary($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptPropertyRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collConceptPropertysRelatedByCreatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptPropertysRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptPropertysRelatedByCreatedUserIdJoinConceptRelatedByRelatedConceptId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertysRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collConceptPropertysRelatedByCreatedUserId = array();
			} else {

				$criteria->add(ConceptPropertyPeer::CREATED_USER_ID, $this->id);

				$this->collConceptPropertysRelatedByCreatedUserId = ConceptPropertyPeer::doSelectJoinConceptRelatedByRelatedConceptId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPropertyPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastConceptPropertyRelatedByCreatedUserIdCriteria) || !$this->lastConceptPropertyRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collConceptPropertysRelatedByCreatedUserId = ConceptPropertyPeer::doSelectJoinConceptRelatedByRelatedConceptId($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptPropertyRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collConceptPropertysRelatedByCreatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptPropertysRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptPropertysRelatedByCreatedUserIdJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertysRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collConceptPropertysRelatedByCreatedUserId = array();
			} else {

				$criteria->add(ConceptPropertyPeer::CREATED_USER_ID, $this->id);

				$this->collConceptPropertysRelatedByCreatedUserId = ConceptPropertyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPropertyPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastConceptPropertyRelatedByCreatedUserIdCriteria) || !$this->lastConceptPropertyRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collConceptPropertysRelatedByCreatedUserId = ConceptPropertyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptPropertyRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collConceptPropertysRelatedByCreatedUserId;
	}

	/**
	 * Clears out the collConceptPropertysRelatedByUpdatedUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addConceptPropertysRelatedByUpdatedUserId()
	 */
	public function clearConceptPropertysRelatedByUpdatedUserId()
	{
		$this->collConceptPropertysRelatedByUpdatedUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collConceptPropertysRelatedByUpdatedUserId collection (array).
	 *
	 * By default this just sets the collConceptPropertysRelatedByUpdatedUserId collection to an empty array (like clearcollConceptPropertysRelatedByUpdatedUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initConceptPropertysRelatedByUpdatedUserId()
	{
		$this->collConceptPropertysRelatedByUpdatedUserId = array();
	}

	/**
	 * Gets an array of ConceptProperty objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related ConceptPropertysRelatedByUpdatedUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ConceptProperty[]
	 * @throws     PropelException
	 */
	public function getConceptPropertysRelatedByUpdatedUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertysRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
			   $this->collConceptPropertysRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(ConceptPropertyPeer::UPDATED_USER_ID, $this->id);

				ConceptPropertyPeer::addSelectColumns($criteria);
				$this->collConceptPropertysRelatedByUpdatedUserId = ConceptPropertyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ConceptPropertyPeer::UPDATED_USER_ID, $this->id);

				ConceptPropertyPeer::addSelectColumns($criteria);
				if (!isset($this->lastConceptPropertyRelatedByUpdatedUserIdCriteria) || !$this->lastConceptPropertyRelatedByUpdatedUserIdCriteria->equals($criteria)) {
					$this->collConceptPropertysRelatedByUpdatedUserId = ConceptPropertyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastConceptPropertyRelatedByUpdatedUserIdCriteria = $criteria;
		return $this->collConceptPropertysRelatedByUpdatedUserId;
	}

	/**
	 * Returns the number of related ConceptProperty objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ConceptProperty objects.
	 * @throws     PropelException
	 */
	public function countConceptPropertysRelatedByUpdatedUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collConceptPropertysRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ConceptPropertyPeer::UPDATED_USER_ID, $this->id);

				$count = ConceptPropertyPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ConceptPropertyPeer::UPDATED_USER_ID, $this->id);

				if (!isset($this->lastConceptPropertyRelatedByUpdatedUserIdCriteria) || !$this->lastConceptPropertyRelatedByUpdatedUserIdCriteria->equals($criteria)) {
					$count = ConceptPropertyPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collConceptPropertysRelatedByUpdatedUserId);
				}
			} else {
				$count = count($this->collConceptPropertysRelatedByUpdatedUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ConceptProperty object to this object
	 * through the ConceptProperty foreign key attribute.
	 *
	 * @param      ConceptProperty $l ConceptProperty
	 * @return     void
	 * @throws     PropelException
	 */
	public function addConceptPropertyRelatedByUpdatedUserId(ConceptProperty $l)
	{
		if ($this->collConceptPropertysRelatedByUpdatedUserId === null) {
			$this->initConceptPropertysRelatedByUpdatedUserId();
		}
		if (!in_array($l, $this->collConceptPropertysRelatedByUpdatedUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collConceptPropertysRelatedByUpdatedUserId, $l);
			$l->setUserRelatedByUpdatedUserId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptPropertysRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptPropertysRelatedByUpdatedUserIdJoinConceptRelatedByConceptId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertysRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collConceptPropertysRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(ConceptPropertyPeer::UPDATED_USER_ID, $this->id);

				$this->collConceptPropertysRelatedByUpdatedUserId = ConceptPropertyPeer::doSelectJoinConceptRelatedByConceptId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPropertyPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastConceptPropertyRelatedByUpdatedUserIdCriteria) || !$this->lastConceptPropertyRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collConceptPropertysRelatedByUpdatedUserId = ConceptPropertyPeer::doSelectJoinConceptRelatedByConceptId($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptPropertyRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collConceptPropertysRelatedByUpdatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptPropertysRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptPropertysRelatedByUpdatedUserIdJoinSkosProperty($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertysRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collConceptPropertysRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(ConceptPropertyPeer::UPDATED_USER_ID, $this->id);

				$this->collConceptPropertysRelatedByUpdatedUserId = ConceptPropertyPeer::doSelectJoinSkosProperty($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPropertyPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastConceptPropertyRelatedByUpdatedUserIdCriteria) || !$this->lastConceptPropertyRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collConceptPropertysRelatedByUpdatedUserId = ConceptPropertyPeer::doSelectJoinSkosProperty($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptPropertyRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collConceptPropertysRelatedByUpdatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptPropertysRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptPropertysRelatedByUpdatedUserIdJoinVocabulary($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertysRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collConceptPropertysRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(ConceptPropertyPeer::UPDATED_USER_ID, $this->id);

				$this->collConceptPropertysRelatedByUpdatedUserId = ConceptPropertyPeer::doSelectJoinVocabulary($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPropertyPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastConceptPropertyRelatedByUpdatedUserIdCriteria) || !$this->lastConceptPropertyRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collConceptPropertysRelatedByUpdatedUserId = ConceptPropertyPeer::doSelectJoinVocabulary($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptPropertyRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collConceptPropertysRelatedByUpdatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptPropertysRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptPropertysRelatedByUpdatedUserIdJoinConceptRelatedByRelatedConceptId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertysRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collConceptPropertysRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(ConceptPropertyPeer::UPDATED_USER_ID, $this->id);

				$this->collConceptPropertysRelatedByUpdatedUserId = ConceptPropertyPeer::doSelectJoinConceptRelatedByRelatedConceptId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPropertyPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastConceptPropertyRelatedByUpdatedUserIdCriteria) || !$this->lastConceptPropertyRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collConceptPropertysRelatedByUpdatedUserId = ConceptPropertyPeer::doSelectJoinConceptRelatedByRelatedConceptId($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptPropertyRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collConceptPropertysRelatedByUpdatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptPropertysRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptPropertysRelatedByUpdatedUserIdJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertysRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collConceptPropertysRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(ConceptPropertyPeer::UPDATED_USER_ID, $this->id);

				$this->collConceptPropertysRelatedByUpdatedUserId = ConceptPropertyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPropertyPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastConceptPropertyRelatedByUpdatedUserIdCriteria) || !$this->lastConceptPropertyRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collConceptPropertysRelatedByUpdatedUserId = ConceptPropertyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptPropertyRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collConceptPropertysRelatedByUpdatedUserId;
	}

	/**
	 * Clears out the collConceptPropertyHistorys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addConceptPropertyHistorys()
	 */
	public function clearConceptPropertyHistorys()
	{
		$this->collConceptPropertyHistorys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collConceptPropertyHistorys collection (array).
	 *
	 * By default this just sets the collConceptPropertyHistorys collection to an empty array (like clearcollConceptPropertyHistorys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initConceptPropertyHistorys()
	{
		$this->collConceptPropertyHistorys = array();
	}

	/**
	 * Gets an array of ConceptPropertyHistory objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related ConceptPropertyHistorys from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ConceptPropertyHistory[]
	 * @throws     PropelException
	 */
	public function getConceptPropertyHistorys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertyHistorys === null) {
			if ($this->isNew()) {
			   $this->collConceptPropertyHistorys = array();
			} else {

				$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

				ConceptPropertyHistoryPeer::addSelectColumns($criteria);
				$this->collConceptPropertyHistorys = ConceptPropertyHistoryPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

				ConceptPropertyHistoryPeer::addSelectColumns($criteria);
				if (!isset($this->lastConceptPropertyHistoryCriteria) || !$this->lastConceptPropertyHistoryCriteria->equals($criteria)) {
					$this->collConceptPropertyHistorys = ConceptPropertyHistoryPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastConceptPropertyHistoryCriteria = $criteria;
		return $this->collConceptPropertyHistorys;
	}

	/**
	 * Returns the number of related ConceptPropertyHistory objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ConceptPropertyHistory objects.
	 * @throws     PropelException
	 */
	public function countConceptPropertyHistorys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collConceptPropertyHistorys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

				$count = ConceptPropertyHistoryPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

				if (!isset($this->lastConceptPropertyHistoryCriteria) || !$this->lastConceptPropertyHistoryCriteria->equals($criteria)) {
					$count = ConceptPropertyHistoryPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collConceptPropertyHistorys);
				}
			} else {
				$count = count($this->collConceptPropertyHistorys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ConceptPropertyHistory object to this object
	 * through the ConceptPropertyHistory foreign key attribute.
	 *
	 * @param      ConceptPropertyHistory $l ConceptPropertyHistory
	 * @return     void
	 * @throws     PropelException
	 */
	public function addConceptPropertyHistory(ConceptPropertyHistory $l)
	{
		if ($this->collConceptPropertyHistorys === null) {
			$this->initConceptPropertyHistorys();
		}
		if (!in_array($l, $this->collConceptPropertyHistorys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collConceptPropertyHistorys, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptPropertyHistorys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptPropertyHistorysJoinConceptProperty($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertyHistorys === null) {
			if ($this->isNew()) {
				$this->collConceptPropertyHistorys = array();
			} else {

				$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

				$this->collConceptPropertyHistorys = ConceptPropertyHistoryPeer::doSelectJoinConceptProperty($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastConceptPropertyHistoryCriteria) || !$this->lastConceptPropertyHistoryCriteria->equals($criteria)) {
				$this->collConceptPropertyHistorys = ConceptPropertyHistoryPeer::doSelectJoinConceptProperty($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptPropertyHistoryCriteria = $criteria;

		return $this->collConceptPropertyHistorys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptPropertyHistorys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptPropertyHistorysJoinConceptRelatedByConceptId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertyHistorys === null) {
			if ($this->isNew()) {
				$this->collConceptPropertyHistorys = array();
			} else {

				$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

				$this->collConceptPropertyHistorys = ConceptPropertyHistoryPeer::doSelectJoinConceptRelatedByConceptId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastConceptPropertyHistoryCriteria) || !$this->lastConceptPropertyHistoryCriteria->equals($criteria)) {
				$this->collConceptPropertyHistorys = ConceptPropertyHistoryPeer::doSelectJoinConceptRelatedByConceptId($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptPropertyHistoryCriteria = $criteria;

		return $this->collConceptPropertyHistorys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptPropertyHistorys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptPropertyHistorysJoinVocabularyRelatedByVocabularyId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertyHistorys === null) {
			if ($this->isNew()) {
				$this->collConceptPropertyHistorys = array();
			} else {

				$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

				$this->collConceptPropertyHistorys = ConceptPropertyHistoryPeer::doSelectJoinVocabularyRelatedByVocabularyId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastConceptPropertyHistoryCriteria) || !$this->lastConceptPropertyHistoryCriteria->equals($criteria)) {
				$this->collConceptPropertyHistorys = ConceptPropertyHistoryPeer::doSelectJoinVocabularyRelatedByVocabularyId($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptPropertyHistoryCriteria = $criteria;

		return $this->collConceptPropertyHistorys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptPropertyHistorys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptPropertyHistorysJoinSkosProperty($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertyHistorys === null) {
			if ($this->isNew()) {
				$this->collConceptPropertyHistorys = array();
			} else {

				$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

				$this->collConceptPropertyHistorys = ConceptPropertyHistoryPeer::doSelectJoinSkosProperty($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastConceptPropertyHistoryCriteria) || !$this->lastConceptPropertyHistoryCriteria->equals($criteria)) {
				$this->collConceptPropertyHistorys = ConceptPropertyHistoryPeer::doSelectJoinSkosProperty($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptPropertyHistoryCriteria = $criteria;

		return $this->collConceptPropertyHistorys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptPropertyHistorys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptPropertyHistorysJoinVocabularyRelatedBySchemeId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertyHistorys === null) {
			if ($this->isNew()) {
				$this->collConceptPropertyHistorys = array();
			} else {

				$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

				$this->collConceptPropertyHistorys = ConceptPropertyHistoryPeer::doSelectJoinVocabularyRelatedBySchemeId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastConceptPropertyHistoryCriteria) || !$this->lastConceptPropertyHistoryCriteria->equals($criteria)) {
				$this->collConceptPropertyHistorys = ConceptPropertyHistoryPeer::doSelectJoinVocabularyRelatedBySchemeId($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptPropertyHistoryCriteria = $criteria;

		return $this->collConceptPropertyHistorys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptPropertyHistorys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptPropertyHistorysJoinConceptRelatedByRelatedConceptId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertyHistorys === null) {
			if ($this->isNew()) {
				$this->collConceptPropertyHistorys = array();
			} else {

				$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

				$this->collConceptPropertyHistorys = ConceptPropertyHistoryPeer::doSelectJoinConceptRelatedByRelatedConceptId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastConceptPropertyHistoryCriteria) || !$this->lastConceptPropertyHistoryCriteria->equals($criteria)) {
				$this->collConceptPropertyHistorys = ConceptPropertyHistoryPeer::doSelectJoinConceptRelatedByRelatedConceptId($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptPropertyHistoryCriteria = $criteria;

		return $this->collConceptPropertyHistorys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related ConceptPropertyHistorys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getConceptPropertyHistorysJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collConceptPropertyHistorys === null) {
			if ($this->isNew()) {
				$this->collConceptPropertyHistorys = array();
			} else {

				$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

				$this->collConceptPropertyHistorys = ConceptPropertyHistoryPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ConceptPropertyHistoryPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastConceptPropertyHistoryCriteria) || !$this->lastConceptPropertyHistoryCriteria->equals($criteria)) {
				$this->collConceptPropertyHistorys = ConceptPropertyHistoryPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastConceptPropertyHistoryCriteria = $criteria;

		return $this->collConceptPropertyHistorys;
	}

	/**
	 * Clears out the collSchemasRelatedByCreatedUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSchemasRelatedByCreatedUserId()
	 */
	public function clearSchemasRelatedByCreatedUserId()
	{
		$this->collSchemasRelatedByCreatedUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSchemasRelatedByCreatedUserId collection (array).
	 *
	 * By default this just sets the collSchemasRelatedByCreatedUserId collection to an empty array (like clearcollSchemasRelatedByCreatedUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSchemasRelatedByCreatedUserId()
	{
		$this->collSchemasRelatedByCreatedUserId = array();
	}

	/**
	 * Gets an array of Schema objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related SchemasRelatedByCreatedUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Schema[]
	 * @throws     PropelException
	 */
	public function getSchemasRelatedByCreatedUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemasRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
			   $this->collSchemasRelatedByCreatedUserId = array();
			} else {

				$criteria->add(SchemaPeer::CREATED_USER_ID, $this->id);

				SchemaPeer::addSelectColumns($criteria);
				$this->collSchemasRelatedByCreatedUserId = SchemaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SchemaPeer::CREATED_USER_ID, $this->id);

				SchemaPeer::addSelectColumns($criteria);
				if (!isset($this->lastSchemaRelatedByCreatedUserIdCriteria) || !$this->lastSchemaRelatedByCreatedUserIdCriteria->equals($criteria)) {
					$this->collSchemasRelatedByCreatedUserId = SchemaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSchemaRelatedByCreatedUserIdCriteria = $criteria;
		return $this->collSchemasRelatedByCreatedUserId;
	}

	/**
	 * Returns the number of related Schema objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Schema objects.
	 * @throws     PropelException
	 */
	public function countSchemasRelatedByCreatedUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSchemasRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SchemaPeer::CREATED_USER_ID, $this->id);

				$count = SchemaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SchemaPeer::CREATED_USER_ID, $this->id);

				if (!isset($this->lastSchemaRelatedByCreatedUserIdCriteria) || !$this->lastSchemaRelatedByCreatedUserIdCriteria->equals($criteria)) {
					$count = SchemaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSchemasRelatedByCreatedUserId);
				}
			} else {
				$count = count($this->collSchemasRelatedByCreatedUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Schema object to this object
	 * through the Schema foreign key attribute.
	 *
	 * @param      Schema $l Schema
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSchemaRelatedByCreatedUserId(Schema $l)
	{
		if ($this->collSchemasRelatedByCreatedUserId === null) {
			$this->initSchemasRelatedByCreatedUserId();
		}
		if (!in_array($l, $this->collSchemasRelatedByCreatedUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSchemasRelatedByCreatedUserId, $l);
			$l->setUserRelatedByCreatedUserId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemasRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemasRelatedByCreatedUserIdJoinAgent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemasRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemasRelatedByCreatedUserId = array();
			} else {

				$criteria->add(SchemaPeer::CREATED_USER_ID, $this->id);

				$this->collSchemasRelatedByCreatedUserId = SchemaPeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaRelatedByCreatedUserIdCriteria) || !$this->lastSchemaRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collSchemasRelatedByCreatedUserId = SchemaPeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collSchemasRelatedByCreatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemasRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemasRelatedByCreatedUserIdJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemasRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemasRelatedByCreatedUserId = array();
			} else {

				$criteria->add(SchemaPeer::CREATED_USER_ID, $this->id);

				$this->collSchemasRelatedByCreatedUserId = SchemaPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaRelatedByCreatedUserIdCriteria) || !$this->lastSchemaRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collSchemasRelatedByCreatedUserId = SchemaPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collSchemasRelatedByCreatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemasRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemasRelatedByCreatedUserIdJoinProfile($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemasRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemasRelatedByCreatedUserId = array();
			} else {

				$criteria->add(SchemaPeer::CREATED_USER_ID, $this->id);

				$this->collSchemasRelatedByCreatedUserId = SchemaPeer::doSelectJoinProfile($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaRelatedByCreatedUserIdCriteria) || !$this->lastSchemaRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collSchemasRelatedByCreatedUserId = SchemaPeer::doSelectJoinProfile($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collSchemasRelatedByCreatedUserId;
	}

	/**
	 * Clears out the collSchemasRelatedByUpdatedUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSchemasRelatedByUpdatedUserId()
	 */
	public function clearSchemasRelatedByUpdatedUserId()
	{
		$this->collSchemasRelatedByUpdatedUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSchemasRelatedByUpdatedUserId collection (array).
	 *
	 * By default this just sets the collSchemasRelatedByUpdatedUserId collection to an empty array (like clearcollSchemasRelatedByUpdatedUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSchemasRelatedByUpdatedUserId()
	{
		$this->collSchemasRelatedByUpdatedUserId = array();
	}

	/**
	 * Gets an array of Schema objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related SchemasRelatedByUpdatedUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Schema[]
	 * @throws     PropelException
	 */
	public function getSchemasRelatedByUpdatedUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemasRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
			   $this->collSchemasRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(SchemaPeer::UPDATED_USER_ID, $this->id);

				SchemaPeer::addSelectColumns($criteria);
				$this->collSchemasRelatedByUpdatedUserId = SchemaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SchemaPeer::UPDATED_USER_ID, $this->id);

				SchemaPeer::addSelectColumns($criteria);
				if (!isset($this->lastSchemaRelatedByUpdatedUserIdCriteria) || !$this->lastSchemaRelatedByUpdatedUserIdCriteria->equals($criteria)) {
					$this->collSchemasRelatedByUpdatedUserId = SchemaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSchemaRelatedByUpdatedUserIdCriteria = $criteria;
		return $this->collSchemasRelatedByUpdatedUserId;
	}

	/**
	 * Returns the number of related Schema objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Schema objects.
	 * @throws     PropelException
	 */
	public function countSchemasRelatedByUpdatedUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSchemasRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SchemaPeer::UPDATED_USER_ID, $this->id);

				$count = SchemaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SchemaPeer::UPDATED_USER_ID, $this->id);

				if (!isset($this->lastSchemaRelatedByUpdatedUserIdCriteria) || !$this->lastSchemaRelatedByUpdatedUserIdCriteria->equals($criteria)) {
					$count = SchemaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSchemasRelatedByUpdatedUserId);
				}
			} else {
				$count = count($this->collSchemasRelatedByUpdatedUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Schema object to this object
	 * through the Schema foreign key attribute.
	 *
	 * @param      Schema $l Schema
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSchemaRelatedByUpdatedUserId(Schema $l)
	{
		if ($this->collSchemasRelatedByUpdatedUserId === null) {
			$this->initSchemasRelatedByUpdatedUserId();
		}
		if (!in_array($l, $this->collSchemasRelatedByUpdatedUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSchemasRelatedByUpdatedUserId, $l);
			$l->setUserRelatedByUpdatedUserId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemasRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemasRelatedByUpdatedUserIdJoinAgent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemasRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemasRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(SchemaPeer::UPDATED_USER_ID, $this->id);

				$this->collSchemasRelatedByUpdatedUserId = SchemaPeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaRelatedByUpdatedUserIdCriteria) || !$this->lastSchemaRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collSchemasRelatedByUpdatedUserId = SchemaPeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collSchemasRelatedByUpdatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemasRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemasRelatedByUpdatedUserIdJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemasRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemasRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(SchemaPeer::UPDATED_USER_ID, $this->id);

				$this->collSchemasRelatedByUpdatedUserId = SchemaPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaRelatedByUpdatedUserIdCriteria) || !$this->lastSchemaRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collSchemasRelatedByUpdatedUserId = SchemaPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collSchemasRelatedByUpdatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemasRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemasRelatedByUpdatedUserIdJoinProfile($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemasRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemasRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(SchemaPeer::UPDATED_USER_ID, $this->id);

				$this->collSchemasRelatedByUpdatedUserId = SchemaPeer::doSelectJoinProfile($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaRelatedByUpdatedUserIdCriteria) || !$this->lastSchemaRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collSchemasRelatedByUpdatedUserId = SchemaPeer::doSelectJoinProfile($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collSchemasRelatedByUpdatedUserId;
	}

	/**
	 * Clears out the collSchemaPropertysRelatedByCreatedUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSchemaPropertysRelatedByCreatedUserId()
	 */
	public function clearSchemaPropertysRelatedByCreatedUserId()
	{
		$this->collSchemaPropertysRelatedByCreatedUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSchemaPropertysRelatedByCreatedUserId collection (array).
	 *
	 * By default this just sets the collSchemaPropertysRelatedByCreatedUserId collection to an empty array (like clearcollSchemaPropertysRelatedByCreatedUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSchemaPropertysRelatedByCreatedUserId()
	{
		$this->collSchemaPropertysRelatedByCreatedUserId = array();
	}

	/**
	 * Gets an array of SchemaProperty objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related SchemaPropertysRelatedByCreatedUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SchemaProperty[]
	 * @throws     PropelException
	 */
	public function getSchemaPropertysRelatedByCreatedUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertysRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
			   $this->collSchemaPropertysRelatedByCreatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyPeer::CREATED_USER_ID, $this->id);

				SchemaPropertyPeer::addSelectColumns($criteria);
				$this->collSchemaPropertysRelatedByCreatedUserId = SchemaPropertyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SchemaPropertyPeer::CREATED_USER_ID, $this->id);

				SchemaPropertyPeer::addSelectColumns($criteria);
				if (!isset($this->lastSchemaPropertyRelatedByCreatedUserIdCriteria) || !$this->lastSchemaPropertyRelatedByCreatedUserIdCriteria->equals($criteria)) {
					$this->collSchemaPropertysRelatedByCreatedUserId = SchemaPropertyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSchemaPropertyRelatedByCreatedUserIdCriteria = $criteria;
		return $this->collSchemaPropertysRelatedByCreatedUserId;
	}

	/**
	 * Returns the number of related SchemaProperty objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SchemaProperty objects.
	 * @throws     PropelException
	 */
	public function countSchemaPropertysRelatedByCreatedUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSchemaPropertysRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SchemaPropertyPeer::CREATED_USER_ID, $this->id);

				$count = SchemaPropertyPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SchemaPropertyPeer::CREATED_USER_ID, $this->id);

				if (!isset($this->lastSchemaPropertyRelatedByCreatedUserIdCriteria) || !$this->lastSchemaPropertyRelatedByCreatedUserIdCriteria->equals($criteria)) {
					$count = SchemaPropertyPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSchemaPropertysRelatedByCreatedUserId);
				}
			} else {
				$count = count($this->collSchemaPropertysRelatedByCreatedUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SchemaProperty object to this object
	 * through the SchemaProperty foreign key attribute.
	 *
	 * @param      SchemaProperty $l SchemaProperty
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSchemaPropertyRelatedByCreatedUserId(SchemaProperty $l)
	{
		if ($this->collSchemaPropertysRelatedByCreatedUserId === null) {
			$this->initSchemaPropertysRelatedByCreatedUserId();
		}
		if (!in_array($l, $this->collSchemaPropertysRelatedByCreatedUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSchemaPropertysRelatedByCreatedUserId, $l);
			$l->setUserRelatedByCreatedUserId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertysRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertysRelatedByCreatedUserIdJoinSchema($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertysRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertysRelatedByCreatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyPeer::CREATED_USER_ID, $this->id);

				$this->collSchemaPropertysRelatedByCreatedUserId = SchemaPropertyPeer::doSelectJoinSchema($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyRelatedByCreatedUserIdCriteria) || !$this->lastSchemaPropertyRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collSchemaPropertysRelatedByCreatedUserId = SchemaPropertyPeer::doSelectJoinSchema($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collSchemaPropertysRelatedByCreatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertysRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertysRelatedByCreatedUserIdJoinSchemaPropertyRelatedByIsSubpropertyOf($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertysRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertysRelatedByCreatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyPeer::CREATED_USER_ID, $this->id);

				$this->collSchemaPropertysRelatedByCreatedUserId = SchemaPropertyPeer::doSelectJoinSchemaPropertyRelatedByIsSubpropertyOf($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyRelatedByCreatedUserIdCriteria) || !$this->lastSchemaPropertyRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collSchemaPropertysRelatedByCreatedUserId = SchemaPropertyPeer::doSelectJoinSchemaPropertyRelatedByIsSubpropertyOf($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collSchemaPropertysRelatedByCreatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertysRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertysRelatedByCreatedUserIdJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertysRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertysRelatedByCreatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyPeer::CREATED_USER_ID, $this->id);

				$this->collSchemaPropertysRelatedByCreatedUserId = SchemaPropertyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyRelatedByCreatedUserIdCriteria) || !$this->lastSchemaPropertyRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collSchemaPropertysRelatedByCreatedUserId = SchemaPropertyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collSchemaPropertysRelatedByCreatedUserId;
	}

	/**
	 * Clears out the collSchemaPropertysRelatedByUpdatedUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSchemaPropertysRelatedByUpdatedUserId()
	 */
	public function clearSchemaPropertysRelatedByUpdatedUserId()
	{
		$this->collSchemaPropertysRelatedByUpdatedUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSchemaPropertysRelatedByUpdatedUserId collection (array).
	 *
	 * By default this just sets the collSchemaPropertysRelatedByUpdatedUserId collection to an empty array (like clearcollSchemaPropertysRelatedByUpdatedUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSchemaPropertysRelatedByUpdatedUserId()
	{
		$this->collSchemaPropertysRelatedByUpdatedUserId = array();
	}

	/**
	 * Gets an array of SchemaProperty objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related SchemaPropertysRelatedByUpdatedUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SchemaProperty[]
	 * @throws     PropelException
	 */
	public function getSchemaPropertysRelatedByUpdatedUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertysRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
			   $this->collSchemaPropertysRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyPeer::UPDATED_USER_ID, $this->id);

				SchemaPropertyPeer::addSelectColumns($criteria);
				$this->collSchemaPropertysRelatedByUpdatedUserId = SchemaPropertyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SchemaPropertyPeer::UPDATED_USER_ID, $this->id);

				SchemaPropertyPeer::addSelectColumns($criteria);
				if (!isset($this->lastSchemaPropertyRelatedByUpdatedUserIdCriteria) || !$this->lastSchemaPropertyRelatedByUpdatedUserIdCriteria->equals($criteria)) {
					$this->collSchemaPropertysRelatedByUpdatedUserId = SchemaPropertyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSchemaPropertyRelatedByUpdatedUserIdCriteria = $criteria;
		return $this->collSchemaPropertysRelatedByUpdatedUserId;
	}

	/**
	 * Returns the number of related SchemaProperty objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SchemaProperty objects.
	 * @throws     PropelException
	 */
	public function countSchemaPropertysRelatedByUpdatedUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSchemaPropertysRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SchemaPropertyPeer::UPDATED_USER_ID, $this->id);

				$count = SchemaPropertyPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SchemaPropertyPeer::UPDATED_USER_ID, $this->id);

				if (!isset($this->lastSchemaPropertyRelatedByUpdatedUserIdCriteria) || !$this->lastSchemaPropertyRelatedByUpdatedUserIdCriteria->equals($criteria)) {
					$count = SchemaPropertyPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSchemaPropertysRelatedByUpdatedUserId);
				}
			} else {
				$count = count($this->collSchemaPropertysRelatedByUpdatedUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SchemaProperty object to this object
	 * through the SchemaProperty foreign key attribute.
	 *
	 * @param      SchemaProperty $l SchemaProperty
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSchemaPropertyRelatedByUpdatedUserId(SchemaProperty $l)
	{
		if ($this->collSchemaPropertysRelatedByUpdatedUserId === null) {
			$this->initSchemaPropertysRelatedByUpdatedUserId();
		}
		if (!in_array($l, $this->collSchemaPropertysRelatedByUpdatedUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSchemaPropertysRelatedByUpdatedUserId, $l);
			$l->setUserRelatedByUpdatedUserId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertysRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertysRelatedByUpdatedUserIdJoinSchema($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertysRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertysRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyPeer::UPDATED_USER_ID, $this->id);

				$this->collSchemaPropertysRelatedByUpdatedUserId = SchemaPropertyPeer::doSelectJoinSchema($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyRelatedByUpdatedUserIdCriteria) || !$this->lastSchemaPropertyRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collSchemaPropertysRelatedByUpdatedUserId = SchemaPropertyPeer::doSelectJoinSchema($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collSchemaPropertysRelatedByUpdatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertysRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertysRelatedByUpdatedUserIdJoinSchemaPropertyRelatedByIsSubpropertyOf($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertysRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertysRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyPeer::UPDATED_USER_ID, $this->id);

				$this->collSchemaPropertysRelatedByUpdatedUserId = SchemaPropertyPeer::doSelectJoinSchemaPropertyRelatedByIsSubpropertyOf($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyRelatedByUpdatedUserIdCriteria) || !$this->lastSchemaPropertyRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collSchemaPropertysRelatedByUpdatedUserId = SchemaPropertyPeer::doSelectJoinSchemaPropertyRelatedByIsSubpropertyOf($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collSchemaPropertysRelatedByUpdatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertysRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertysRelatedByUpdatedUserIdJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertysRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertysRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyPeer::UPDATED_USER_ID, $this->id);

				$this->collSchemaPropertysRelatedByUpdatedUserId = SchemaPropertyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyRelatedByUpdatedUserIdCriteria) || !$this->lastSchemaPropertyRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collSchemaPropertysRelatedByUpdatedUserId = SchemaPropertyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collSchemaPropertysRelatedByUpdatedUserId;
	}

	/**
	 * Clears out the collSchemaPropertyElementsRelatedByCreatedUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSchemaPropertyElementsRelatedByCreatedUserId()
	 */
	public function clearSchemaPropertyElementsRelatedByCreatedUserId()
	{
		$this->collSchemaPropertyElementsRelatedByCreatedUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSchemaPropertyElementsRelatedByCreatedUserId collection (array).
	 *
	 * By default this just sets the collSchemaPropertyElementsRelatedByCreatedUserId collection to an empty array (like clearcollSchemaPropertyElementsRelatedByCreatedUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSchemaPropertyElementsRelatedByCreatedUserId()
	{
		$this->collSchemaPropertyElementsRelatedByCreatedUserId = array();
	}

	/**
	 * Gets an array of SchemaPropertyElement objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related SchemaPropertyElementsRelatedByCreatedUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SchemaPropertyElement[]
	 * @throws     PropelException
	 */
	public function getSchemaPropertyElementsRelatedByCreatedUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertyElementsRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
			   $this->collSchemaPropertyElementsRelatedByCreatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyElementPeer::CREATED_USER_ID, $this->id);

				SchemaPropertyElementPeer::addSelectColumns($criteria);
				$this->collSchemaPropertyElementsRelatedByCreatedUserId = SchemaPropertyElementPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SchemaPropertyElementPeer::CREATED_USER_ID, $this->id);

				SchemaPropertyElementPeer::addSelectColumns($criteria);
				if (!isset($this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria) || !$this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria->equals($criteria)) {
					$this->collSchemaPropertyElementsRelatedByCreatedUserId = SchemaPropertyElementPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria = $criteria;
		return $this->collSchemaPropertyElementsRelatedByCreatedUserId;
	}

	/**
	 * Returns the number of related SchemaPropertyElement objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SchemaPropertyElement objects.
	 * @throws     PropelException
	 */
	public function countSchemaPropertyElementsRelatedByCreatedUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSchemaPropertyElementsRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SchemaPropertyElementPeer::CREATED_USER_ID, $this->id);

				$count = SchemaPropertyElementPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SchemaPropertyElementPeer::CREATED_USER_ID, $this->id);

				if (!isset($this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria) || !$this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria->equals($criteria)) {
					$count = SchemaPropertyElementPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSchemaPropertyElementsRelatedByCreatedUserId);
				}
			} else {
				$count = count($this->collSchemaPropertyElementsRelatedByCreatedUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SchemaPropertyElement object to this object
	 * through the SchemaPropertyElement foreign key attribute.
	 *
	 * @param      SchemaPropertyElement $l SchemaPropertyElement
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSchemaPropertyElementRelatedByCreatedUserId(SchemaPropertyElement $l)
	{
		if ($this->collSchemaPropertyElementsRelatedByCreatedUserId === null) {
			$this->initSchemaPropertyElementsRelatedByCreatedUserId();
		}
		if (!in_array($l, $this->collSchemaPropertyElementsRelatedByCreatedUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSchemaPropertyElementsRelatedByCreatedUserId, $l);
			$l->setUserRelatedByCreatedUserId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertyElementsRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertyElementsRelatedByCreatedUserIdJoinSchemaPropertyRelatedBySchemaPropertyId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertyElementsRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertyElementsRelatedByCreatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyElementPeer::CREATED_USER_ID, $this->id);

				$this->collSchemaPropertyElementsRelatedByCreatedUserId = SchemaPropertyElementPeer::doSelectJoinSchemaPropertyRelatedBySchemaPropertyId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyElementPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria) || !$this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collSchemaPropertyElementsRelatedByCreatedUserId = SchemaPropertyElementPeer::doSelectJoinSchemaPropertyRelatedBySchemaPropertyId($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collSchemaPropertyElementsRelatedByCreatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertyElementsRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertyElementsRelatedByCreatedUserIdJoinProfileProperty($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertyElementsRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertyElementsRelatedByCreatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyElementPeer::CREATED_USER_ID, $this->id);

				$this->collSchemaPropertyElementsRelatedByCreatedUserId = SchemaPropertyElementPeer::doSelectJoinProfileProperty($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyElementPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria) || !$this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collSchemaPropertyElementsRelatedByCreatedUserId = SchemaPropertyElementPeer::doSelectJoinProfileProperty($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collSchemaPropertyElementsRelatedByCreatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertyElementsRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertyElementsRelatedByCreatedUserIdJoinSchemaPropertyRelatedByRelatedSchemaPropertyId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertyElementsRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertyElementsRelatedByCreatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyElementPeer::CREATED_USER_ID, $this->id);

				$this->collSchemaPropertyElementsRelatedByCreatedUserId = SchemaPropertyElementPeer::doSelectJoinSchemaPropertyRelatedByRelatedSchemaPropertyId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyElementPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria) || !$this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collSchemaPropertyElementsRelatedByCreatedUserId = SchemaPropertyElementPeer::doSelectJoinSchemaPropertyRelatedByRelatedSchemaPropertyId($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collSchemaPropertyElementsRelatedByCreatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertyElementsRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertyElementsRelatedByCreatedUserIdJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertyElementsRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertyElementsRelatedByCreatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyElementPeer::CREATED_USER_ID, $this->id);

				$this->collSchemaPropertyElementsRelatedByCreatedUserId = SchemaPropertyElementPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyElementPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria) || !$this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collSchemaPropertyElementsRelatedByCreatedUserId = SchemaPropertyElementPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyElementRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collSchemaPropertyElementsRelatedByCreatedUserId;
	}

	/**
	 * Clears out the collSchemaPropertyElementsRelatedByUpdatedUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSchemaPropertyElementsRelatedByUpdatedUserId()
	 */
	public function clearSchemaPropertyElementsRelatedByUpdatedUserId()
	{
		$this->collSchemaPropertyElementsRelatedByUpdatedUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSchemaPropertyElementsRelatedByUpdatedUserId collection (array).
	 *
	 * By default this just sets the collSchemaPropertyElementsRelatedByUpdatedUserId collection to an empty array (like clearcollSchemaPropertyElementsRelatedByUpdatedUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSchemaPropertyElementsRelatedByUpdatedUserId()
	{
		$this->collSchemaPropertyElementsRelatedByUpdatedUserId = array();
	}

	/**
	 * Gets an array of SchemaPropertyElement objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related SchemaPropertyElementsRelatedByUpdatedUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SchemaPropertyElement[]
	 * @throws     PropelException
	 */
	public function getSchemaPropertyElementsRelatedByUpdatedUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertyElementsRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
			   $this->collSchemaPropertyElementsRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyElementPeer::UPDATED_USER_ID, $this->id);

				SchemaPropertyElementPeer::addSelectColumns($criteria);
				$this->collSchemaPropertyElementsRelatedByUpdatedUserId = SchemaPropertyElementPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SchemaPropertyElementPeer::UPDATED_USER_ID, $this->id);

				SchemaPropertyElementPeer::addSelectColumns($criteria);
				if (!isset($this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria) || !$this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria->equals($criteria)) {
					$this->collSchemaPropertyElementsRelatedByUpdatedUserId = SchemaPropertyElementPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria = $criteria;
		return $this->collSchemaPropertyElementsRelatedByUpdatedUserId;
	}

	/**
	 * Returns the number of related SchemaPropertyElement objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SchemaPropertyElement objects.
	 * @throws     PropelException
	 */
	public function countSchemaPropertyElementsRelatedByUpdatedUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSchemaPropertyElementsRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SchemaPropertyElementPeer::UPDATED_USER_ID, $this->id);

				$count = SchemaPropertyElementPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SchemaPropertyElementPeer::UPDATED_USER_ID, $this->id);

				if (!isset($this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria) || !$this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria->equals($criteria)) {
					$count = SchemaPropertyElementPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSchemaPropertyElementsRelatedByUpdatedUserId);
				}
			} else {
				$count = count($this->collSchemaPropertyElementsRelatedByUpdatedUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SchemaPropertyElement object to this object
	 * through the SchemaPropertyElement foreign key attribute.
	 *
	 * @param      SchemaPropertyElement $l SchemaPropertyElement
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSchemaPropertyElementRelatedByUpdatedUserId(SchemaPropertyElement $l)
	{
		if ($this->collSchemaPropertyElementsRelatedByUpdatedUserId === null) {
			$this->initSchemaPropertyElementsRelatedByUpdatedUserId();
		}
		if (!in_array($l, $this->collSchemaPropertyElementsRelatedByUpdatedUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSchemaPropertyElementsRelatedByUpdatedUserId, $l);
			$l->setUserRelatedByUpdatedUserId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertyElementsRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertyElementsRelatedByUpdatedUserIdJoinSchemaPropertyRelatedBySchemaPropertyId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertyElementsRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertyElementsRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyElementPeer::UPDATED_USER_ID, $this->id);

				$this->collSchemaPropertyElementsRelatedByUpdatedUserId = SchemaPropertyElementPeer::doSelectJoinSchemaPropertyRelatedBySchemaPropertyId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyElementPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria) || !$this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collSchemaPropertyElementsRelatedByUpdatedUserId = SchemaPropertyElementPeer::doSelectJoinSchemaPropertyRelatedBySchemaPropertyId($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collSchemaPropertyElementsRelatedByUpdatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertyElementsRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertyElementsRelatedByUpdatedUserIdJoinProfileProperty($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertyElementsRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertyElementsRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyElementPeer::UPDATED_USER_ID, $this->id);

				$this->collSchemaPropertyElementsRelatedByUpdatedUserId = SchemaPropertyElementPeer::doSelectJoinProfileProperty($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyElementPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria) || !$this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collSchemaPropertyElementsRelatedByUpdatedUserId = SchemaPropertyElementPeer::doSelectJoinProfileProperty($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collSchemaPropertyElementsRelatedByUpdatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertyElementsRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertyElementsRelatedByUpdatedUserIdJoinSchemaPropertyRelatedByRelatedSchemaPropertyId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertyElementsRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertyElementsRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyElementPeer::UPDATED_USER_ID, $this->id);

				$this->collSchemaPropertyElementsRelatedByUpdatedUserId = SchemaPropertyElementPeer::doSelectJoinSchemaPropertyRelatedByRelatedSchemaPropertyId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyElementPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria) || !$this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collSchemaPropertyElementsRelatedByUpdatedUserId = SchemaPropertyElementPeer::doSelectJoinSchemaPropertyRelatedByRelatedSchemaPropertyId($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collSchemaPropertyElementsRelatedByUpdatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertyElementsRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertyElementsRelatedByUpdatedUserIdJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertyElementsRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertyElementsRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(SchemaPropertyElementPeer::UPDATED_USER_ID, $this->id);

				$this->collSchemaPropertyElementsRelatedByUpdatedUserId = SchemaPropertyElementPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyElementPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria) || !$this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collSchemaPropertyElementsRelatedByUpdatedUserId = SchemaPropertyElementPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyElementRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collSchemaPropertyElementsRelatedByUpdatedUserId;
	}

	/**
	 * Clears out the collSchemaPropertyElementHistorys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSchemaPropertyElementHistorys()
	 */
	public function clearSchemaPropertyElementHistorys()
	{
		$this->collSchemaPropertyElementHistorys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSchemaPropertyElementHistorys collection (array).
	 *
	 * By default this just sets the collSchemaPropertyElementHistorys collection to an empty array (like clearcollSchemaPropertyElementHistorys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSchemaPropertyElementHistorys()
	{
		$this->collSchemaPropertyElementHistorys = array();
	}

	/**
	 * Gets an array of SchemaPropertyElementHistory objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related SchemaPropertyElementHistorys from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SchemaPropertyElementHistory[]
	 * @throws     PropelException
	 */
	public function getSchemaPropertyElementHistorys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertyElementHistorys === null) {
			if ($this->isNew()) {
			   $this->collSchemaPropertyElementHistorys = array();
			} else {

				$criteria->add(SchemaPropertyElementHistoryPeer::CREATED_USER_ID, $this->id);

				SchemaPropertyElementHistoryPeer::addSelectColumns($criteria);
				$this->collSchemaPropertyElementHistorys = SchemaPropertyElementHistoryPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SchemaPropertyElementHistoryPeer::CREATED_USER_ID, $this->id);

				SchemaPropertyElementHistoryPeer::addSelectColumns($criteria);
				if (!isset($this->lastSchemaPropertyElementHistoryCriteria) || !$this->lastSchemaPropertyElementHistoryCriteria->equals($criteria)) {
					$this->collSchemaPropertyElementHistorys = SchemaPropertyElementHistoryPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSchemaPropertyElementHistoryCriteria = $criteria;
		return $this->collSchemaPropertyElementHistorys;
	}

	/**
	 * Returns the number of related SchemaPropertyElementHistory objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SchemaPropertyElementHistory objects.
	 * @throws     PropelException
	 */
	public function countSchemaPropertyElementHistorys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSchemaPropertyElementHistorys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SchemaPropertyElementHistoryPeer::CREATED_USER_ID, $this->id);

				$count = SchemaPropertyElementHistoryPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SchemaPropertyElementHistoryPeer::CREATED_USER_ID, $this->id);

				if (!isset($this->lastSchemaPropertyElementHistoryCriteria) || !$this->lastSchemaPropertyElementHistoryCriteria->equals($criteria)) {
					$count = SchemaPropertyElementHistoryPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSchemaPropertyElementHistorys);
				}
			} else {
				$count = count($this->collSchemaPropertyElementHistorys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SchemaPropertyElementHistory object to this object
	 * through the SchemaPropertyElementHistory foreign key attribute.
	 *
	 * @param      SchemaPropertyElementHistory $l SchemaPropertyElementHistory
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSchemaPropertyElementHistory(SchemaPropertyElementHistory $l)
	{
		if ($this->collSchemaPropertyElementHistorys === null) {
			$this->initSchemaPropertyElementHistorys();
		}
		if (!in_array($l, $this->collSchemaPropertyElementHistorys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSchemaPropertyElementHistorys, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertyElementHistorys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertyElementHistorysJoinSchemaPropertyElement($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertyElementHistorys === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertyElementHistorys = array();
			} else {

				$criteria->add(SchemaPropertyElementHistoryPeer::CREATED_USER_ID, $this->id);

				$this->collSchemaPropertyElementHistorys = SchemaPropertyElementHistoryPeer::doSelectJoinSchemaPropertyElement($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyElementHistoryPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyElementHistoryCriteria) || !$this->lastSchemaPropertyElementHistoryCriteria->equals($criteria)) {
				$this->collSchemaPropertyElementHistorys = SchemaPropertyElementHistoryPeer::doSelectJoinSchemaPropertyElement($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyElementHistoryCriteria = $criteria;

		return $this->collSchemaPropertyElementHistorys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertyElementHistorys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertyElementHistorysJoinSchemaPropertyRelatedBySchemaPropertyId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertyElementHistorys === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertyElementHistorys = array();
			} else {

				$criteria->add(SchemaPropertyElementHistoryPeer::CREATED_USER_ID, $this->id);

				$this->collSchemaPropertyElementHistorys = SchemaPropertyElementHistoryPeer::doSelectJoinSchemaPropertyRelatedBySchemaPropertyId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyElementHistoryPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyElementHistoryCriteria) || !$this->lastSchemaPropertyElementHistoryCriteria->equals($criteria)) {
				$this->collSchemaPropertyElementHistorys = SchemaPropertyElementHistoryPeer::doSelectJoinSchemaPropertyRelatedBySchemaPropertyId($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyElementHistoryCriteria = $criteria;

		return $this->collSchemaPropertyElementHistorys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertyElementHistorys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertyElementHistorysJoinSchema($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertyElementHistorys === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertyElementHistorys = array();
			} else {

				$criteria->add(SchemaPropertyElementHistoryPeer::CREATED_USER_ID, $this->id);

				$this->collSchemaPropertyElementHistorys = SchemaPropertyElementHistoryPeer::doSelectJoinSchema($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyElementHistoryPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyElementHistoryCriteria) || !$this->lastSchemaPropertyElementHistoryCriteria->equals($criteria)) {
				$this->collSchemaPropertyElementHistorys = SchemaPropertyElementHistoryPeer::doSelectJoinSchema($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyElementHistoryCriteria = $criteria;

		return $this->collSchemaPropertyElementHistorys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertyElementHistorys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertyElementHistorysJoinProfileProperty($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertyElementHistorys === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertyElementHistorys = array();
			} else {

				$criteria->add(SchemaPropertyElementHistoryPeer::CREATED_USER_ID, $this->id);

				$this->collSchemaPropertyElementHistorys = SchemaPropertyElementHistoryPeer::doSelectJoinProfileProperty($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyElementHistoryPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyElementHistoryCriteria) || !$this->lastSchemaPropertyElementHistoryCriteria->equals($criteria)) {
				$this->collSchemaPropertyElementHistorys = SchemaPropertyElementHistoryPeer::doSelectJoinProfileProperty($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyElementHistoryCriteria = $criteria;

		return $this->collSchemaPropertyElementHistorys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertyElementHistorys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertyElementHistorysJoinSchemaPropertyRelatedByRelatedSchemaPropertyId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertyElementHistorys === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertyElementHistorys = array();
			} else {

				$criteria->add(SchemaPropertyElementHistoryPeer::CREATED_USER_ID, $this->id);

				$this->collSchemaPropertyElementHistorys = SchemaPropertyElementHistoryPeer::doSelectJoinSchemaPropertyRelatedByRelatedSchemaPropertyId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyElementHistoryPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyElementHistoryCriteria) || !$this->lastSchemaPropertyElementHistoryCriteria->equals($criteria)) {
				$this->collSchemaPropertyElementHistorys = SchemaPropertyElementHistoryPeer::doSelectJoinSchemaPropertyRelatedByRelatedSchemaPropertyId($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyElementHistoryCriteria = $criteria;

		return $this->collSchemaPropertyElementHistorys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaPropertyElementHistorys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaPropertyElementHistorysJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaPropertyElementHistorys === null) {
			if ($this->isNew()) {
				$this->collSchemaPropertyElementHistorys = array();
			} else {

				$criteria->add(SchemaPropertyElementHistoryPeer::CREATED_USER_ID, $this->id);

				$this->collSchemaPropertyElementHistorys = SchemaPropertyElementHistoryPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaPropertyElementHistoryPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaPropertyElementHistoryCriteria) || !$this->lastSchemaPropertyElementHistoryCriteria->equals($criteria)) {
				$this->collSchemaPropertyElementHistorys = SchemaPropertyElementHistoryPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaPropertyElementHistoryCriteria = $criteria;

		return $this->collSchemaPropertyElementHistorys;
	}

	/**
	 * Clears out the collVocabularysRelatedByCreatedUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVocabularysRelatedByCreatedUserId()
	 */
	public function clearVocabularysRelatedByCreatedUserId()
	{
		$this->collVocabularysRelatedByCreatedUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVocabularysRelatedByCreatedUserId collection (array).
	 *
	 * By default this just sets the collVocabularysRelatedByCreatedUserId collection to an empty array (like clearcollVocabularysRelatedByCreatedUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initVocabularysRelatedByCreatedUserId()
	{
		$this->collVocabularysRelatedByCreatedUserId = array();
	}

	/**
	 * Gets an array of Vocabulary objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related VocabularysRelatedByCreatedUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Vocabulary[]
	 * @throws     PropelException
	 */
	public function getVocabularysRelatedByCreatedUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVocabularysRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
			   $this->collVocabularysRelatedByCreatedUserId = array();
			} else {

				$criteria->add(VocabularyPeer::CREATED_USER_ID, $this->id);

				VocabularyPeer::addSelectColumns($criteria);
				$this->collVocabularysRelatedByCreatedUserId = VocabularyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(VocabularyPeer::CREATED_USER_ID, $this->id);

				VocabularyPeer::addSelectColumns($criteria);
				if (!isset($this->lastVocabularyRelatedByCreatedUserIdCriteria) || !$this->lastVocabularyRelatedByCreatedUserIdCriteria->equals($criteria)) {
					$this->collVocabularysRelatedByCreatedUserId = VocabularyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastVocabularyRelatedByCreatedUserIdCriteria = $criteria;
		return $this->collVocabularysRelatedByCreatedUserId;
	}

	/**
	 * Returns the number of related Vocabulary objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Vocabulary objects.
	 * @throws     PropelException
	 */
	public function countVocabularysRelatedByCreatedUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collVocabularysRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(VocabularyPeer::CREATED_USER_ID, $this->id);

				$count = VocabularyPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(VocabularyPeer::CREATED_USER_ID, $this->id);

				if (!isset($this->lastVocabularyRelatedByCreatedUserIdCriteria) || !$this->lastVocabularyRelatedByCreatedUserIdCriteria->equals($criteria)) {
					$count = VocabularyPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collVocabularysRelatedByCreatedUserId);
				}
			} else {
				$count = count($this->collVocabularysRelatedByCreatedUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Vocabulary object to this object
	 * through the Vocabulary foreign key attribute.
	 *
	 * @param      Vocabulary $l Vocabulary
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVocabularyRelatedByCreatedUserId(Vocabulary $l)
	{
		if ($this->collVocabularysRelatedByCreatedUserId === null) {
			$this->initVocabularysRelatedByCreatedUserId();
		}
		if (!in_array($l, $this->collVocabularysRelatedByCreatedUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collVocabularysRelatedByCreatedUserId, $l);
			$l->setUserRelatedByCreatedUserId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related VocabularysRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getVocabularysRelatedByCreatedUserIdJoinAgent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVocabularysRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collVocabularysRelatedByCreatedUserId = array();
			} else {

				$criteria->add(VocabularyPeer::CREATED_USER_ID, $this->id);

				$this->collVocabularysRelatedByCreatedUserId = VocabularyPeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VocabularyPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastVocabularyRelatedByCreatedUserIdCriteria) || !$this->lastVocabularyRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collVocabularysRelatedByCreatedUserId = VocabularyPeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		}
		$this->lastVocabularyRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collVocabularysRelatedByCreatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related VocabularysRelatedByCreatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getVocabularysRelatedByCreatedUserIdJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVocabularysRelatedByCreatedUserId === null) {
			if ($this->isNew()) {
				$this->collVocabularysRelatedByCreatedUserId = array();
			} else {

				$criteria->add(VocabularyPeer::CREATED_USER_ID, $this->id);

				$this->collVocabularysRelatedByCreatedUserId = VocabularyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VocabularyPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastVocabularyRelatedByCreatedUserIdCriteria) || !$this->lastVocabularyRelatedByCreatedUserIdCriteria->equals($criteria)) {
				$this->collVocabularysRelatedByCreatedUserId = VocabularyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastVocabularyRelatedByCreatedUserIdCriteria = $criteria;

		return $this->collVocabularysRelatedByCreatedUserId;
	}

	/**
	 * Clears out the collVocabularysRelatedByUpdatedUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVocabularysRelatedByUpdatedUserId()
	 */
	public function clearVocabularysRelatedByUpdatedUserId()
	{
		$this->collVocabularysRelatedByUpdatedUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVocabularysRelatedByUpdatedUserId collection (array).
	 *
	 * By default this just sets the collVocabularysRelatedByUpdatedUserId collection to an empty array (like clearcollVocabularysRelatedByUpdatedUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initVocabularysRelatedByUpdatedUserId()
	{
		$this->collVocabularysRelatedByUpdatedUserId = array();
	}

	/**
	 * Gets an array of Vocabulary objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related VocabularysRelatedByUpdatedUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Vocabulary[]
	 * @throws     PropelException
	 */
	public function getVocabularysRelatedByUpdatedUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVocabularysRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
			   $this->collVocabularysRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(VocabularyPeer::UPDATED_USER_ID, $this->id);

				VocabularyPeer::addSelectColumns($criteria);
				$this->collVocabularysRelatedByUpdatedUserId = VocabularyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(VocabularyPeer::UPDATED_USER_ID, $this->id);

				VocabularyPeer::addSelectColumns($criteria);
				if (!isset($this->lastVocabularyRelatedByUpdatedUserIdCriteria) || !$this->lastVocabularyRelatedByUpdatedUserIdCriteria->equals($criteria)) {
					$this->collVocabularysRelatedByUpdatedUserId = VocabularyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastVocabularyRelatedByUpdatedUserIdCriteria = $criteria;
		return $this->collVocabularysRelatedByUpdatedUserId;
	}

	/**
	 * Returns the number of related Vocabulary objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Vocabulary objects.
	 * @throws     PropelException
	 */
	public function countVocabularysRelatedByUpdatedUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collVocabularysRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(VocabularyPeer::UPDATED_USER_ID, $this->id);

				$count = VocabularyPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(VocabularyPeer::UPDATED_USER_ID, $this->id);

				if (!isset($this->lastVocabularyRelatedByUpdatedUserIdCriteria) || !$this->lastVocabularyRelatedByUpdatedUserIdCriteria->equals($criteria)) {
					$count = VocabularyPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collVocabularysRelatedByUpdatedUserId);
				}
			} else {
				$count = count($this->collVocabularysRelatedByUpdatedUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Vocabulary object to this object
	 * through the Vocabulary foreign key attribute.
	 *
	 * @param      Vocabulary $l Vocabulary
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVocabularyRelatedByUpdatedUserId(Vocabulary $l)
	{
		if ($this->collVocabularysRelatedByUpdatedUserId === null) {
			$this->initVocabularysRelatedByUpdatedUserId();
		}
		if (!in_array($l, $this->collVocabularysRelatedByUpdatedUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collVocabularysRelatedByUpdatedUserId, $l);
			$l->setUserRelatedByUpdatedUserId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related VocabularysRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getVocabularysRelatedByUpdatedUserIdJoinAgent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVocabularysRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collVocabularysRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(VocabularyPeer::UPDATED_USER_ID, $this->id);

				$this->collVocabularysRelatedByUpdatedUserId = VocabularyPeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VocabularyPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastVocabularyRelatedByUpdatedUserIdCriteria) || !$this->lastVocabularyRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collVocabularysRelatedByUpdatedUserId = VocabularyPeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		}
		$this->lastVocabularyRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collVocabularysRelatedByUpdatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related VocabularysRelatedByUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getVocabularysRelatedByUpdatedUserIdJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVocabularysRelatedByUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collVocabularysRelatedByUpdatedUserId = array();
			} else {

				$criteria->add(VocabularyPeer::UPDATED_USER_ID, $this->id);

				$this->collVocabularysRelatedByUpdatedUserId = VocabularyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VocabularyPeer::UPDATED_USER_ID, $this->id);

			if (!isset($this->lastVocabularyRelatedByUpdatedUserIdCriteria) || !$this->lastVocabularyRelatedByUpdatedUserIdCriteria->equals($criteria)) {
				$this->collVocabularysRelatedByUpdatedUserId = VocabularyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastVocabularyRelatedByUpdatedUserIdCriteria = $criteria;

		return $this->collVocabularysRelatedByUpdatedUserId;
	}

	/**
	 * Clears out the collVocabularysRelatedByChildUpdatedUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVocabularysRelatedByChildUpdatedUserId()
	 */
	public function clearVocabularysRelatedByChildUpdatedUserId()
	{
		$this->collVocabularysRelatedByChildUpdatedUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVocabularysRelatedByChildUpdatedUserId collection (array).
	 *
	 * By default this just sets the collVocabularysRelatedByChildUpdatedUserId collection to an empty array (like clearcollVocabularysRelatedByChildUpdatedUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initVocabularysRelatedByChildUpdatedUserId()
	{
		$this->collVocabularysRelatedByChildUpdatedUserId = array();
	}

	/**
	 * Gets an array of Vocabulary objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related VocabularysRelatedByChildUpdatedUserId from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Vocabulary[]
	 * @throws     PropelException
	 */
	public function getVocabularysRelatedByChildUpdatedUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVocabularysRelatedByChildUpdatedUserId === null) {
			if ($this->isNew()) {
			   $this->collVocabularysRelatedByChildUpdatedUserId = array();
			} else {

				$criteria->add(VocabularyPeer::CHILD_UPDATED_USER_ID, $this->id);

				VocabularyPeer::addSelectColumns($criteria);
				$this->collVocabularysRelatedByChildUpdatedUserId = VocabularyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(VocabularyPeer::CHILD_UPDATED_USER_ID, $this->id);

				VocabularyPeer::addSelectColumns($criteria);
				if (!isset($this->lastVocabularyRelatedByChildUpdatedUserIdCriteria) || !$this->lastVocabularyRelatedByChildUpdatedUserIdCriteria->equals($criteria)) {
					$this->collVocabularysRelatedByChildUpdatedUserId = VocabularyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastVocabularyRelatedByChildUpdatedUserIdCriteria = $criteria;
		return $this->collVocabularysRelatedByChildUpdatedUserId;
	}

	/**
	 * Returns the number of related Vocabulary objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Vocabulary objects.
	 * @throws     PropelException
	 */
	public function countVocabularysRelatedByChildUpdatedUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collVocabularysRelatedByChildUpdatedUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(VocabularyPeer::CHILD_UPDATED_USER_ID, $this->id);

				$count = VocabularyPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(VocabularyPeer::CHILD_UPDATED_USER_ID, $this->id);

				if (!isset($this->lastVocabularyRelatedByChildUpdatedUserIdCriteria) || !$this->lastVocabularyRelatedByChildUpdatedUserIdCriteria->equals($criteria)) {
					$count = VocabularyPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collVocabularysRelatedByChildUpdatedUserId);
				}
			} else {
				$count = count($this->collVocabularysRelatedByChildUpdatedUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Vocabulary object to this object
	 * through the Vocabulary foreign key attribute.
	 *
	 * @param      Vocabulary $l Vocabulary
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVocabularyRelatedByChildUpdatedUserId(Vocabulary $l)
	{
		if ($this->collVocabularysRelatedByChildUpdatedUserId === null) {
			$this->initVocabularysRelatedByChildUpdatedUserId();
		}
		if (!in_array($l, $this->collVocabularysRelatedByChildUpdatedUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collVocabularysRelatedByChildUpdatedUserId, $l);
			$l->setUserRelatedByChildUpdatedUserId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related VocabularysRelatedByChildUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getVocabularysRelatedByChildUpdatedUserIdJoinAgent($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVocabularysRelatedByChildUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collVocabularysRelatedByChildUpdatedUserId = array();
			} else {

				$criteria->add(VocabularyPeer::CHILD_UPDATED_USER_ID, $this->id);

				$this->collVocabularysRelatedByChildUpdatedUserId = VocabularyPeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VocabularyPeer::CHILD_UPDATED_USER_ID, $this->id);

			if (!isset($this->lastVocabularyRelatedByChildUpdatedUserIdCriteria) || !$this->lastVocabularyRelatedByChildUpdatedUserIdCriteria->equals($criteria)) {
				$this->collVocabularysRelatedByChildUpdatedUserId = VocabularyPeer::doSelectJoinAgent($criteria, $con, $join_behavior);
			}
		}
		$this->lastVocabularyRelatedByChildUpdatedUserIdCriteria = $criteria;

		return $this->collVocabularysRelatedByChildUpdatedUserId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related VocabularysRelatedByChildUpdatedUserId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getVocabularysRelatedByChildUpdatedUserIdJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVocabularysRelatedByChildUpdatedUserId === null) {
			if ($this->isNew()) {
				$this->collVocabularysRelatedByChildUpdatedUserId = array();
			} else {

				$criteria->add(VocabularyPeer::CHILD_UPDATED_USER_ID, $this->id);

				$this->collVocabularysRelatedByChildUpdatedUserId = VocabularyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VocabularyPeer::CHILD_UPDATED_USER_ID, $this->id);

			if (!isset($this->lastVocabularyRelatedByChildUpdatedUserIdCriteria) || !$this->lastVocabularyRelatedByChildUpdatedUserIdCriteria->equals($criteria)) {
				$this->collVocabularysRelatedByChildUpdatedUserId = VocabularyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastVocabularyRelatedByChildUpdatedUserIdCriteria = $criteria;

		return $this->collVocabularysRelatedByChildUpdatedUserId;
	}

	/**
	 * Clears out the collVocabularyHasUsers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVocabularyHasUsers()
	 */
	public function clearVocabularyHasUsers()
	{
		$this->collVocabularyHasUsers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVocabularyHasUsers collection (array).
	 *
	 * By default this just sets the collVocabularyHasUsers collection to an empty array (like clearcollVocabularyHasUsers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initVocabularyHasUsers()
	{
		$this->collVocabularyHasUsers = array();
	}

	/**
	 * Gets an array of VocabularyHasUser objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related VocabularyHasUsers from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array VocabularyHasUser[]
	 * @throws     PropelException
	 */
	public function getVocabularyHasUsers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVocabularyHasUsers === null) {
			if ($this->isNew()) {
			   $this->collVocabularyHasUsers = array();
			} else {

				$criteria->add(VocabularyHasUserPeer::USER_ID, $this->id);

				VocabularyHasUserPeer::addSelectColumns($criteria);
				$this->collVocabularyHasUsers = VocabularyHasUserPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(VocabularyHasUserPeer::USER_ID, $this->id);

				VocabularyHasUserPeer::addSelectColumns($criteria);
				if (!isset($this->lastVocabularyHasUserCriteria) || !$this->lastVocabularyHasUserCriteria->equals($criteria)) {
					$this->collVocabularyHasUsers = VocabularyHasUserPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastVocabularyHasUserCriteria = $criteria;
		return $this->collVocabularyHasUsers;
	}

	/**
	 * Returns the number of related VocabularyHasUser objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related VocabularyHasUser objects.
	 * @throws     PropelException
	 */
	public function countVocabularyHasUsers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collVocabularyHasUsers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(VocabularyHasUserPeer::USER_ID, $this->id);

				$count = VocabularyHasUserPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(VocabularyHasUserPeer::USER_ID, $this->id);

				if (!isset($this->lastVocabularyHasUserCriteria) || !$this->lastVocabularyHasUserCriteria->equals($criteria)) {
					$count = VocabularyHasUserPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collVocabularyHasUsers);
				}
			} else {
				$count = count($this->collVocabularyHasUsers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a VocabularyHasUser object to this object
	 * through the VocabularyHasUser foreign key attribute.
	 *
	 * @param      VocabularyHasUser $l VocabularyHasUser
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVocabularyHasUser(VocabularyHasUser $l)
	{
		if ($this->collVocabularyHasUsers === null) {
			$this->initVocabularyHasUsers();
		}
		if (!in_array($l, $this->collVocabularyHasUsers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collVocabularyHasUsers, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related VocabularyHasUsers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getVocabularyHasUsersJoinVocabulary($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVocabularyHasUsers === null) {
			if ($this->isNew()) {
				$this->collVocabularyHasUsers = array();
			} else {

				$criteria->add(VocabularyHasUserPeer::USER_ID, $this->id);

				$this->collVocabularyHasUsers = VocabularyHasUserPeer::doSelectJoinVocabulary($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VocabularyHasUserPeer::USER_ID, $this->id);

			if (!isset($this->lastVocabularyHasUserCriteria) || !$this->lastVocabularyHasUserCriteria->equals($criteria)) {
				$this->collVocabularyHasUsers = VocabularyHasUserPeer::doSelectJoinVocabulary($criteria, $con, $join_behavior);
			}
		}
		$this->lastVocabularyHasUserCriteria = $criteria;

		return $this->collVocabularyHasUsers;
	}

	/**
	 * Clears out the collVocabularyHasVersions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVocabularyHasVersions()
	 */
	public function clearVocabularyHasVersions()
	{
		$this->collVocabularyHasVersions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVocabularyHasVersions collection (array).
	 *
	 * By default this just sets the collVocabularyHasVersions collection to an empty array (like clearcollVocabularyHasVersions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initVocabularyHasVersions()
	{
		$this->collVocabularyHasVersions = array();
	}

	/**
	 * Gets an array of VocabularyHasVersion objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related VocabularyHasVersions from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array VocabularyHasVersion[]
	 * @throws     PropelException
	 */
	public function getVocabularyHasVersions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVocabularyHasVersions === null) {
			if ($this->isNew()) {
			   $this->collVocabularyHasVersions = array();
			} else {

				$criteria->add(VocabularyHasVersionPeer::CREATED_USER_ID, $this->id);

				VocabularyHasVersionPeer::addSelectColumns($criteria);
				$this->collVocabularyHasVersions = VocabularyHasVersionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(VocabularyHasVersionPeer::CREATED_USER_ID, $this->id);

				VocabularyHasVersionPeer::addSelectColumns($criteria);
				if (!isset($this->lastVocabularyHasVersionCriteria) || !$this->lastVocabularyHasVersionCriteria->equals($criteria)) {
					$this->collVocabularyHasVersions = VocabularyHasVersionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastVocabularyHasVersionCriteria = $criteria;
		return $this->collVocabularyHasVersions;
	}

	/**
	 * Returns the number of related VocabularyHasVersion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related VocabularyHasVersion objects.
	 * @throws     PropelException
	 */
	public function countVocabularyHasVersions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collVocabularyHasVersions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(VocabularyHasVersionPeer::CREATED_USER_ID, $this->id);

				$count = VocabularyHasVersionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(VocabularyHasVersionPeer::CREATED_USER_ID, $this->id);

				if (!isset($this->lastVocabularyHasVersionCriteria) || !$this->lastVocabularyHasVersionCriteria->equals($criteria)) {
					$count = VocabularyHasVersionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collVocabularyHasVersions);
				}
			} else {
				$count = count($this->collVocabularyHasVersions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a VocabularyHasVersion object to this object
	 * through the VocabularyHasVersion foreign key attribute.
	 *
	 * @param      VocabularyHasVersion $l VocabularyHasVersion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVocabularyHasVersion(VocabularyHasVersion $l)
	{
		if ($this->collVocabularyHasVersions === null) {
			$this->initVocabularyHasVersions();
		}
		if (!in_array($l, $this->collVocabularyHasVersions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collVocabularyHasVersions, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related VocabularyHasVersions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getVocabularyHasVersionsJoinVocabulary($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVocabularyHasVersions === null) {
			if ($this->isNew()) {
				$this->collVocabularyHasVersions = array();
			} else {

				$criteria->add(VocabularyHasVersionPeer::CREATED_USER_ID, $this->id);

				$this->collVocabularyHasVersions = VocabularyHasVersionPeer::doSelectJoinVocabulary($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VocabularyHasVersionPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastVocabularyHasVersionCriteria) || !$this->lastVocabularyHasVersionCriteria->equals($criteria)) {
				$this->collVocabularyHasVersions = VocabularyHasVersionPeer::doSelectJoinVocabulary($criteria, $con, $join_behavior);
			}
		}
		$this->lastVocabularyHasVersionCriteria = $criteria;

		return $this->collVocabularyHasVersions;
	}

	/**
	 * Clears out the collSchemaHasUsers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSchemaHasUsers()
	 */
	public function clearSchemaHasUsers()
	{
		$this->collSchemaHasUsers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSchemaHasUsers collection (array).
	 *
	 * By default this just sets the collSchemaHasUsers collection to an empty array (like clearcollSchemaHasUsers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSchemaHasUsers()
	{
		$this->collSchemaHasUsers = array();
	}

	/**
	 * Gets an array of SchemaHasUser objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related SchemaHasUsers from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SchemaHasUser[]
	 * @throws     PropelException
	 */
	public function getSchemaHasUsers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaHasUsers === null) {
			if ($this->isNew()) {
			   $this->collSchemaHasUsers = array();
			} else {

				$criteria->add(SchemaHasUserPeer::USER_ID, $this->id);

				SchemaHasUserPeer::addSelectColumns($criteria);
				$this->collSchemaHasUsers = SchemaHasUserPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SchemaHasUserPeer::USER_ID, $this->id);

				SchemaHasUserPeer::addSelectColumns($criteria);
				if (!isset($this->lastSchemaHasUserCriteria) || !$this->lastSchemaHasUserCriteria->equals($criteria)) {
					$this->collSchemaHasUsers = SchemaHasUserPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSchemaHasUserCriteria = $criteria;
		return $this->collSchemaHasUsers;
	}

	/**
	 * Returns the number of related SchemaHasUser objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SchemaHasUser objects.
	 * @throws     PropelException
	 */
	public function countSchemaHasUsers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSchemaHasUsers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SchemaHasUserPeer::USER_ID, $this->id);

				$count = SchemaHasUserPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SchemaHasUserPeer::USER_ID, $this->id);

				if (!isset($this->lastSchemaHasUserCriteria) || !$this->lastSchemaHasUserCriteria->equals($criteria)) {
					$count = SchemaHasUserPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSchemaHasUsers);
				}
			} else {
				$count = count($this->collSchemaHasUsers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SchemaHasUser object to this object
	 * through the SchemaHasUser foreign key attribute.
	 *
	 * @param      SchemaHasUser $l SchemaHasUser
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSchemaHasUser(SchemaHasUser $l)
	{
		if ($this->collSchemaHasUsers === null) {
			$this->initSchemaHasUsers();
		}
		if (!in_array($l, $this->collSchemaHasUsers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSchemaHasUsers, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaHasUsers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaHasUsersJoinSchema($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaHasUsers === null) {
			if ($this->isNew()) {
				$this->collSchemaHasUsers = array();
			} else {

				$criteria->add(SchemaHasUserPeer::USER_ID, $this->id);

				$this->collSchemaHasUsers = SchemaHasUserPeer::doSelectJoinSchema($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaHasUserPeer::USER_ID, $this->id);

			if (!isset($this->lastSchemaHasUserCriteria) || !$this->lastSchemaHasUserCriteria->equals($criteria)) {
				$this->collSchemaHasUsers = SchemaHasUserPeer::doSelectJoinSchema($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaHasUserCriteria = $criteria;

		return $this->collSchemaHasUsers;
	}

	/**
	 * Clears out the collSchemaHasVersions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSchemaHasVersions()
	 */
	public function clearSchemaHasVersions()
	{
		$this->collSchemaHasVersions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSchemaHasVersions collection (array).
	 *
	 * By default this just sets the collSchemaHasVersions collection to an empty array (like clearcollSchemaHasVersions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSchemaHasVersions()
	{
		$this->collSchemaHasVersions = array();
	}

	/**
	 * Gets an array of SchemaHasVersion objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this User has previously been saved, it will retrieve
	 * related SchemaHasVersions from storage. If this User is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SchemaHasVersion[]
	 * @throws     PropelException
	 */
	public function getSchemaHasVersions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaHasVersions === null) {
			if ($this->isNew()) {
			   $this->collSchemaHasVersions = array();
			} else {

				$criteria->add(SchemaHasVersionPeer::CREATED_USER_ID, $this->id);

				SchemaHasVersionPeer::addSelectColumns($criteria);
				$this->collSchemaHasVersions = SchemaHasVersionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SchemaHasVersionPeer::CREATED_USER_ID, $this->id);

				SchemaHasVersionPeer::addSelectColumns($criteria);
				if (!isset($this->lastSchemaHasVersionCriteria) || !$this->lastSchemaHasVersionCriteria->equals($criteria)) {
					$this->collSchemaHasVersions = SchemaHasVersionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSchemaHasVersionCriteria = $criteria;
		return $this->collSchemaHasVersions;
	}

	/**
	 * Returns the number of related SchemaHasVersion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SchemaHasVersion objects.
	 * @throws     PropelException
	 */
	public function countSchemaHasVersions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSchemaHasVersions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SchemaHasVersionPeer::CREATED_USER_ID, $this->id);

				$count = SchemaHasVersionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SchemaHasVersionPeer::CREATED_USER_ID, $this->id);

				if (!isset($this->lastSchemaHasVersionCriteria) || !$this->lastSchemaHasVersionCriteria->equals($criteria)) {
					$count = SchemaHasVersionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSchemaHasVersions);
				}
			} else {
				$count = count($this->collSchemaHasVersions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SchemaHasVersion object to this object
	 * through the SchemaHasVersion foreign key attribute.
	 *
	 * @param      SchemaHasVersion $l SchemaHasVersion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSchemaHasVersion(SchemaHasVersion $l)
	{
		if ($this->collSchemaHasVersions === null) {
			$this->initSchemaHasVersions();
		}
		if (!in_array($l, $this->collSchemaHasVersions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSchemaHasVersions, $l);
			$l->setUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this User is new, it will return
	 * an empty collection; or if this User has previously
	 * been saved, it will retrieve related SchemaHasVersions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in User.
	 */
	public function getSchemaHasVersionsJoinSchema($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSchemaHasVersions === null) {
			if ($this->isNew()) {
				$this->collSchemaHasVersions = array();
			} else {

				$criteria->add(SchemaHasVersionPeer::CREATED_USER_ID, $this->id);

				$this->collSchemaHasVersions = SchemaHasVersionPeer::doSelectJoinSchema($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SchemaHasVersionPeer::CREATED_USER_ID, $this->id);

			if (!isset($this->lastSchemaHasVersionCriteria) || !$this->lastSchemaHasVersionCriteria->equals($criteria)) {
				$this->collSchemaHasVersions = SchemaHasVersionPeer::doSelectJoinSchema($criteria, $con, $join_behavior);
			}
		}
		$this->lastSchemaHasVersionCriteria = $criteria;

		return $this->collSchemaHasVersions;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collProfilesRelatedByCreatedBy) {
				foreach ((array) $this->collProfilesRelatedByCreatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProfilesRelatedByUpdatedBy) {
				foreach ((array) $this->collProfilesRelatedByUpdatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProfilesRelatedByDeletedBy) {
				foreach ((array) $this->collProfilesRelatedByDeletedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProfilesRelatedByChildUpdatedBy) {
				foreach ((array) $this->collProfilesRelatedByChildUpdatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProfilePropertysRelatedByCreatedBy) {
				foreach ((array) $this->collProfilePropertysRelatedByCreatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProfilePropertysRelatedByUpdatedBy) {
				foreach ((array) $this->collProfilePropertysRelatedByUpdatedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProfilePropertysRelatedByDeletedBy) {
				foreach ((array) $this->collProfilePropertysRelatedByDeletedBy as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAgentHasUsers) {
				foreach ((array) $this->collAgentHasUsers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collConceptsRelatedByCreatedUserId) {
				foreach ((array) $this->collConceptsRelatedByCreatedUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collConceptsRelatedByUpdatedUserId) {
				foreach ((array) $this->collConceptsRelatedByUpdatedUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collConceptPropertysRelatedByCreatedUserId) {
				foreach ((array) $this->collConceptPropertysRelatedByCreatedUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collConceptPropertysRelatedByUpdatedUserId) {
				foreach ((array) $this->collConceptPropertysRelatedByUpdatedUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collConceptPropertyHistorys) {
				foreach ((array) $this->collConceptPropertyHistorys as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSchemasRelatedByCreatedUserId) {
				foreach ((array) $this->collSchemasRelatedByCreatedUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSchemasRelatedByUpdatedUserId) {
				foreach ((array) $this->collSchemasRelatedByUpdatedUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSchemaPropertysRelatedByCreatedUserId) {
				foreach ((array) $this->collSchemaPropertysRelatedByCreatedUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSchemaPropertysRelatedByUpdatedUserId) {
				foreach ((array) $this->collSchemaPropertysRelatedByUpdatedUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSchemaPropertyElementsRelatedByCreatedUserId) {
				foreach ((array) $this->collSchemaPropertyElementsRelatedByCreatedUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSchemaPropertyElementsRelatedByUpdatedUserId) {
				foreach ((array) $this->collSchemaPropertyElementsRelatedByUpdatedUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSchemaPropertyElementHistorys) {
				foreach ((array) $this->collSchemaPropertyElementHistorys as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collVocabularysRelatedByCreatedUserId) {
				foreach ((array) $this->collVocabularysRelatedByCreatedUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collVocabularysRelatedByUpdatedUserId) {
				foreach ((array) $this->collVocabularysRelatedByUpdatedUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collVocabularysRelatedByChildUpdatedUserId) {
				foreach ((array) $this->collVocabularysRelatedByChildUpdatedUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collVocabularyHasUsers) {
				foreach ((array) $this->collVocabularyHasUsers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collVocabularyHasVersions) {
				foreach ((array) $this->collVocabularyHasVersions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSchemaHasUsers) {
				foreach ((array) $this->collSchemaHasUsers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSchemaHasVersions) {
				foreach ((array) $this->collSchemaHasVersions as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collProfilesRelatedByCreatedBy = null;
		$this->collProfilesRelatedByUpdatedBy = null;
		$this->collProfilesRelatedByDeletedBy = null;
		$this->collProfilesRelatedByChildUpdatedBy = null;
		$this->collProfilePropertysRelatedByCreatedBy = null;
		$this->collProfilePropertysRelatedByUpdatedBy = null;
		$this->collProfilePropertysRelatedByDeletedBy = null;
		$this->collAgentHasUsers = null;
		$this->collConceptsRelatedByCreatedUserId = null;
		$this->collConceptsRelatedByUpdatedUserId = null;
		$this->collConceptPropertysRelatedByCreatedUserId = null;
		$this->collConceptPropertysRelatedByUpdatedUserId = null;
		$this->collConceptPropertyHistorys = null;
		$this->collSchemasRelatedByCreatedUserId = null;
		$this->collSchemasRelatedByUpdatedUserId = null;
		$this->collSchemaPropertysRelatedByCreatedUserId = null;
		$this->collSchemaPropertysRelatedByUpdatedUserId = null;
		$this->collSchemaPropertyElementsRelatedByCreatedUserId = null;
		$this->collSchemaPropertyElementsRelatedByUpdatedUserId = null;
		$this->collSchemaPropertyElementHistorys = null;
		$this->collVocabularysRelatedByCreatedUserId = null;
		$this->collVocabularysRelatedByUpdatedUserId = null;
		$this->collVocabularysRelatedByChildUpdatedUserId = null;
		$this->collVocabularyHasUsers = null;
		$this->collVocabularyHasVersions = null;
		$this->collSchemaHasUsers = null;
		$this->collSchemaHasVersions = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseUser:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseUser::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseUser
