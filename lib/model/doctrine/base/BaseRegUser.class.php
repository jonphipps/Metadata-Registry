<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class BaseRegUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('reg_user');
        $this->hasColumn('id', 'integer', 4, array('type' => 'integer', 'primary' => true, 'autoincrement' => true, 'length' => '4'));
        $this->hasColumn('last_updated', 'timestamp', 25, array('type' => 'timestamp', 'notnull' => true, 'length' => '25'));
        $this->hasColumn('want_to_be_moderator', 'integer', 1, array('type' => 'integer', 'default' => '0', 'length' => '1'));
        $this->hasColumn('is_moderator', 'integer', 1, array('type' => 'integer', 'default' => '0', 'length' => '1'));
        $this->hasColumn('is_administrator', 'integer', 1, array('type' => 'integer', 'default' => '0', 'length' => '1'));
        $this->hasColumn('deletions', 'integer', 4, array('type' => 'integer', 'default' => '0', 'length' => '4'));
        $this->hasColumn('created_at', 'timestamp', 25, array('type' => 'timestamp', 'length' => '25'));
        $this->hasColumn('deleted_at', 'timestamp', 25, array('type' => 'timestamp', 'length' => '25'));
        $this->hasColumn('nickname', 'string', 50, array('type' => 'string', 'length' => '50'));
        $this->hasColumn('salutation', 'string', 5, array('type' => 'string', 'length' => '5'));
        $this->hasColumn('first_name', 'string', 100, array('type' => 'string', 'length' => '100'));
        $this->hasColumn('last_name', 'string', 100, array('type' => 'string', 'length' => '100'));
        $this->hasColumn('email', 'string', 100, array('type' => 'string', 'length' => '100'));
        $this->hasColumn('sha1_password', 'string', 40, array('type' => 'string', 'length' => '40'));
        $this->hasColumn('salt', 'string', 32, array('type' => 'string', 'length' => '32'));
        $this->hasColumn('password', 'string', 40, array('type' => 'string', 'length' => '40'));
    }

    public function setUp()
    {
        $this->hasMany('Profile', array('local' => 'id',
                                        'foreign' => 'updated_by'));

        $this->hasMany('ProfileProperty', array('local' => 'id',
                                                'foreign' => 'updated_by'));

        $this->hasMany('RegAgentHasUser', array('local' => 'id',
                                                'foreign' => 'user_id'));

        $this->hasMany('RegConcept', array('local' => 'id',
                                           'foreign' => 'created_user_id'));

        $this->hasMany('RegConceptProperty', array('local' => 'id',
                                                   'foreign' => 'created_user_id'));

        $this->hasMany('RegConceptPropertyHistory', array('local' => 'id',
                                                          'foreign' => 'created_user_id'));

        $this->hasMany('RegObjectHistory', array('local' => 'id',
                                                 'foreign' => 'created_by'));

        $this->hasMany('RegSchema', array('local' => 'id',
                                          'foreign' => 'created_user_id'));

        $this->hasMany('RegSchemaProperty', array('local' => 'id',
                                                  'foreign' => 'created_user_id'));

        $this->hasMany('RegSchemaPropertyElement', array('local' => 'id',
                                                         'foreign' => 'created_user_id'));

        $this->hasMany('RegSchemaPropertyElementHistory', array('local' => 'id',
                                                                'foreign' => 'created_user_id'));

        $this->hasMany('RegVocabulary', array('local' => 'id',
                                              'foreign' => 'created_user_id'));

        $this->hasMany('RegVocabularyHasUser', array('local' => 'id',
                                                     'foreign' => 'user_id'));

        $this->hasMany('RegVocabularyHasVersion', array('local' => 'id',
                                                        'foreign' => 'created_user_id'));

        $this->hasMany('SchemaHasUser', array('local' => 'id',
                                              'foreign' => 'user_id'));

        $this->hasMany('SchemaHasVersion', array('local' => 'id',
                                                 'foreign' => 'created_user_id'));
    }
}